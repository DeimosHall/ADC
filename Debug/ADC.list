
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08003870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003870  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000578d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001739  00000000  00000000  00025826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00026f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  00027558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017685  00000000  00000000  00027a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000794a  00000000  00000000  0003f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085683  00000000  00000000  00046a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b68  00000000  00000000  000cc11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800376c 	.word	0x0800376c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800376c 	.word	0x0800376c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2uiz>:
 8000d10:	0042      	lsls	r2, r0, #1
 8000d12:	d20e      	bcs.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30b      	bcc.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d409      	bmi.n	8000d38 <__aeabi_f2uiz+0x28>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2uiz+0x32>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d102      	bne.n	8000d48 <__aeabi_f2uiz+0x38>
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <lcd_init>:

		return ch;
}
*/
void lcd_init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b90      	ldr	r3, [pc, #576]	; (8000f98 <lcd_init+0x248>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a8f      	ldr	r2, [pc, #572]	; (8000f98 <lcd_init+0x248>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <lcd_init+0x248>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b8a      	ldr	r3, [pc, #552]	; (8000f98 <lcd_init+0x248>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a89      	ldr	r2, [pc, #548]	; (8000f98 <lcd_init+0x248>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <lcd_init+0x248>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b84      	ldr	r3, [pc, #528]	; (8000f98 <lcd_init+0x248>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a83      	ldr	r2, [pc, #524]	; (8000f98 <lcd_init+0x248>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <lcd_init+0x248>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	= LCDRS_PIN;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDRS_PORT, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4879      	ldr	r0, [pc, #484]	; (8000f9c <lcd_init+0x24c>)
 8000db6:	f001 f915 	bl	8001fe4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCDE_PIN;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDE_PORT, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4872      	ldr	r0, [pc, #456]	; (8000f9c <lcd_init+0x24c>)
 8000dd2:	f001 f907 	bl	8001fe4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD4_PIN;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD4_PORT, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	486c      	ldr	r0, [pc, #432]	; (8000fa0 <lcd_init+0x250>)
 8000dee:	f001 f8f9 	bl	8001fe4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD5_PIN;
 8000df2:	2310      	movs	r3, #16
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD5_PORT, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <lcd_init+0x250>)
 8000e0a:	f001 f8eb 	bl	8001fe4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD6_PIN;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD6_PORT, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	485e      	ldr	r0, [pc, #376]	; (8000fa0 <lcd_init+0x250>)
 8000e26:	f001 f8dd 	bl	8001fe4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD7_PIN;
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD7_PORT, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4857      	ldr	r0, [pc, #348]	; (8000fa0 <lcd_init+0x250>)
 8000e42:	f001 f8cf 	bl	8001fe4 <HAL_GPIO_Init>

	HAL_Delay(15);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 fbf2 	bl	8001630 <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4853      	ldr	r0, [pc, #332]	; (8000fa0 <lcd_init+0x250>)
 8000e52:	f001 fa4b 	bl	80022ec <HAL_GPIO_WritePin>
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <lcd_init+0x250>)
 8000e5c:	f001 fa46 	bl	80022ec <HAL_GPIO_WritePin>
 8000e60:	2200      	movs	r2, #0
 8000e62:	2110      	movs	r1, #16
 8000e64:	484e      	ldr	r0, [pc, #312]	; (8000fa0 <lcd_init+0x250>)
 8000e66:	f001 fa41 	bl	80022ec <HAL_GPIO_WritePin>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <lcd_init+0x250>)
 8000e70:	f001 fa3c 	bl	80022ec <HAL_GPIO_WritePin>
	LCDE_OFF;
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	4848      	ldr	r0, [pc, #288]	; (8000f9c <lcd_init+0x24c>)
 8000e7a:	f001 fa37 	bl	80022ec <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	4846      	ldr	r0, [pc, #280]	; (8000f9c <lcd_init+0x24c>)
 8000e84:	f001 fa32 	bl	80022ec <HAL_GPIO_WritePin>
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4844      	ldr	r0, [pc, #272]	; (8000fa0 <lcd_init+0x250>)
 8000e8e:	f001 fa2d 	bl	80022ec <HAL_GPIO_WritePin>
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4842      	ldr	r0, [pc, #264]	; (8000fa0 <lcd_init+0x250>)
 8000e98:	f001 fa28 	bl	80022ec <HAL_GPIO_WritePin>
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <lcd_init+0x250>)
 8000ea2:	f001 fa23 	bl	80022ec <HAL_GPIO_WritePin>
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	483d      	ldr	r0, [pc, #244]	; (8000fa0 <lcd_init+0x250>)
 8000eac:	f001 fa1e 	bl	80022ec <HAL_GPIO_WritePin>
	LCDE_ON;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4839      	ldr	r0, [pc, #228]	; (8000f9c <lcd_init+0x24c>)
 8000eb6:	f001 fa19 	bl	80022ec <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <lcd_init+0x24c>)
 8000ec0:	f001 fa14 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f000 fbb3 	bl	8001630 <HAL_Delay>
	LCDE_OFF;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4833      	ldr	r0, [pc, #204]	; (8000f9c <lcd_init+0x24c>)
 8000ed0:	f001 fa0c 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f000 fbab 	bl	8001630 <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <lcd_init+0x250>)
 8000ee0:	f001 fa04 	bl	80022ec <HAL_GPIO_WritePin>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <lcd_init+0x250>)
 8000eea:	f001 f9ff 	bl	80022ec <HAL_GPIO_WritePin>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <lcd_init+0x250>)
 8000ef4:	f001 f9fa 	bl	80022ec <HAL_GPIO_WritePin>
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2108      	movs	r1, #8
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <lcd_init+0x250>)
 8000efe:	f001 f9f5 	bl	80022ec <HAL_GPIO_WritePin>
	LCDE_ON;
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <lcd_init+0x24c>)
 8000f08:	f001 f9f0 	bl	80022ec <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4822      	ldr	r0, [pc, #136]	; (8000f9c <lcd_init+0x24c>)
 8000f12:	f001 f9eb 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f000 fb8a 	bl	8001630 <HAL_Delay>
	LCDE_OFF;
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <lcd_init+0x24c>)
 8000f22:	f001 f9e3 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fb82 	bl	8001630 <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <lcd_init+0x250>)
 8000f32:	f001 f9db 	bl	80022ec <HAL_GPIO_WritePin>
 8000f36:	2200      	movs	r2, #0
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <lcd_init+0x250>)
 8000f3c:	f001 f9d6 	bl	80022ec <HAL_GPIO_WritePin>
 8000f40:	2201      	movs	r2, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <lcd_init+0x250>)
 8000f46:	f001 f9d1 	bl	80022ec <HAL_GPIO_WritePin>
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <lcd_init+0x250>)
 8000f50:	f001 f9cc 	bl	80022ec <HAL_GPIO_WritePin>
	LCDE_ON;
 8000f54:	2201      	movs	r2, #1
 8000f56:	2110      	movs	r1, #16
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <lcd_init+0x24c>)
 8000f5a:	f001 f9c7 	bl	80022ec <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <lcd_init+0x24c>)
 8000f64:	f001 f9c2 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fb61 	bl	8001630 <HAL_Delay>
	LCDE_OFF;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <lcd_init+0x24c>)
 8000f74:	f001 f9ba 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fb59 	bl	8001630 <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8000f7e:	2028      	movs	r0, #40	; 0x28
 8000f80:	f000 f810 	bl	8000fa4 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 8000f84:	200c      	movs	r0, #12
 8000f86:	f000 f80d 	bl	8000fa4 <lcd_command>
	//-----Clear display
	lcd_clear();
 8000f8a:	f000 f8bd 	bl	8001108 <lcd_clear>
}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <lcd_command>:
	LCDE_ON;
	HAL_Delay(1);//__delay_us(300);
  LCDE_OFF;
  HAL_Delay(1);//__delay_us(300);
}
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4853      	ldr	r0, [pc, #332]	; (8001100 <lcd_command+0x15c>)
 8000fb4:	f001 f99a 	bl	80022ec <HAL_GPIO_WritePin>

	if ( cmd & 0x10 ) {
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <lcd_command+0x2a>
		LCD4_ON;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	484f      	ldr	r0, [pc, #316]	; (8001104 <lcd_command+0x160>)
 8000fc8:	f001 f990 	bl	80022ec <HAL_GPIO_WritePin>
 8000fcc:	e004      	b.n	8000fd8 <lcd_command+0x34>
	} else {
		LCD4_OFF;
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	484c      	ldr	r0, [pc, #304]	; (8001104 <lcd_command+0x160>)
 8000fd4:	f001 f98a 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x20 ) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <lcd_command+0x4a>
		LCD5_ON;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4847      	ldr	r0, [pc, #284]	; (8001104 <lcd_command+0x160>)
 8000fe8:	f001 f980 	bl	80022ec <HAL_GPIO_WritePin>
 8000fec:	e004      	b.n	8000ff8 <lcd_command+0x54>
	} else {
		LCD5_OFF;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	4844      	ldr	r0, [pc, #272]	; (8001104 <lcd_command+0x160>)
 8000ff4:	f001 f97a 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x40 ) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <lcd_command+0x6a>
		LCD6_ON;
 8001002:	2201      	movs	r2, #1
 8001004:	2120      	movs	r1, #32
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <lcd_command+0x160>)
 8001008:	f001 f970 	bl	80022ec <HAL_GPIO_WritePin>
 800100c:	e004      	b.n	8001018 <lcd_command+0x74>
	} else {
		LCD6_OFF;
 800100e:	2200      	movs	r2, #0
 8001010:	2120      	movs	r1, #32
 8001012:	483c      	ldr	r0, [pc, #240]	; (8001104 <lcd_command+0x160>)
 8001014:	f001 f96a 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x80 ) {
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da05      	bge.n	800102c <lcd_command+0x88>
		LCD7_ON;
 8001020:	2201      	movs	r2, #1
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	4837      	ldr	r0, [pc, #220]	; (8001104 <lcd_command+0x160>)
 8001026:	f001 f961 	bl	80022ec <HAL_GPIO_WritePin>
 800102a:	e004      	b.n	8001036 <lcd_command+0x92>
	} else {
		LCD7_OFF;
 800102c:	2200      	movs	r2, #0
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	4834      	ldr	r0, [pc, #208]	; (8001104 <lcd_command+0x160>)
 8001032:	f001 f95b 	bl	80022ec <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001036:	2201      	movs	r2, #1
 8001038:	2110      	movs	r1, #16
 800103a:	4831      	ldr	r0, [pc, #196]	; (8001100 <lcd_command+0x15c>)
 800103c:	f001 f956 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 faf5 	bl	8001630 <HAL_Delay>
	LCDE_OFF;
 8001046:	2200      	movs	r2, #0
 8001048:	2110      	movs	r1, #16
 800104a:	482d      	ldr	r0, [pc, #180]	; (8001100 <lcd_command+0x15c>)
 800104c:	f001 f94e 	bl	80022ec <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 faed 	bl	8001630 <HAL_Delay>

	if ( cmd & 0x01 ) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <lcd_command+0xc8>
		LCD4_ON;
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	4827      	ldr	r0, [pc, #156]	; (8001104 <lcd_command+0x160>)
 8001066:	f001 f941 	bl	80022ec <HAL_GPIO_WritePin>
 800106a:	e004      	b.n	8001076 <lcd_command+0xd2>
	} else {
		LCD4_OFF;
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <lcd_command+0x160>)
 8001072:	f001 f93b 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x02 ) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <lcd_command+0xe8>
		LCD5_ON;
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <lcd_command+0x160>)
 8001086:	f001 f931 	bl	80022ec <HAL_GPIO_WritePin>
 800108a:	e004      	b.n	8001096 <lcd_command+0xf2>
	} else {
		LCD5_OFF;
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <lcd_command+0x160>)
 8001092:	f001 f92b 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x04 ) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <lcd_command+0x108>
		LCD6_ON;
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <lcd_command+0x160>)
 80010a6:	f001 f921 	bl	80022ec <HAL_GPIO_WritePin>
 80010aa:	e004      	b.n	80010b6 <lcd_command+0x112>
	} else {
		LCD6_OFF;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <lcd_command+0x160>)
 80010b2:	f001 f91b 	bl	80022ec <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x08 ) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <lcd_command+0x128>
		LCD7_ON;
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <lcd_command+0x160>)
 80010c6:	f001 f911 	bl	80022ec <HAL_GPIO_WritePin>
 80010ca:	e004      	b.n	80010d6 <lcd_command+0x132>
	} else {
		LCD7_OFF;
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <lcd_command+0x160>)
 80010d2:	f001 f90b 	bl	80022ec <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <lcd_command+0x15c>)
 80010dc:	f001 f906 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 faa5 	bl	8001630 <HAL_Delay>
	LCDE_OFF;
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <lcd_command+0x15c>)
 80010ec:	f001 f8fe 	bl	80022ec <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fa9d 	bl	8001630 <HAL_Delay>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800
 8001104:	40010c00 	.word	0x40010c00

08001108 <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff49 	bl	8000fa4 <lcd_command>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800111e:	f000 fa25 	bl	800156c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001122:	f000 f869 	bl	80011f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001126:	f000 f901 	bl	800132c <MX_GPIO_Init>
	MX_ADC1_Init();
 800112a:	f000 f8c1 	bl	80012b0 <MX_ADC1_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_init();
 800112e:	f7ff fe0f 	bl	8000d50 <lcd_init>

	uint16_t adc;

	HAL_ADCEx_Calibration_Start(&hadc1);
 8001132:	482d      	ldr	r0, [pc, #180]	; (80011e8 <main+0xd0>)
 8001134:	f000 fdc6 	bl	8001cc4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <main+0xd0>)
 800113a:	f000 fb75 	bl	8001828 <HAL_ADC_Start>

	while (1) {
		adc = HAL_ADC_GetValue(&hadc1);
 800113e:	482a      	ldr	r0, [pc, #168]	; (80011e8 <main+0xd0>)
 8001140:	f000 fc20 	bl	8001984 <HAL_ADC_GetValue>
 8001144:	4603      	mov	r3, r0
 8001146:	83fb      	strh	r3, [r7, #30]
		float voltage = (float) adc * 3.3 / 4095;
 8001148:	8bfb      	ldrh	r3, [r7, #30]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd88 	bl	8000c60 <__aeabi_ui2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fa14 	bl	8000580 <__aeabi_f2d>
 8001158:	a31f      	add	r3, pc, #124	; (adr r3, 80011d8 <main+0xc0>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa67 	bl	8000630 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	a31d      	add	r3, pc, #116	; (adr r3, 80011e0 <main+0xc8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fb88 	bl	8000884 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc6a 	bl	8000a54 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
		float temp_voltage;
		uint32_t p_entera, p_frac;
		char str_entera[2];
		char str_frac[3];

		p_entera = (uint32_t) voltage;
 8001184:	69b8      	ldr	r0, [r7, #24]
 8001186:	f7ff fdc3 	bl	8000d10 <__aeabi_f2uiz>
 800118a:	4603      	mov	r3, r0
 800118c:	617b      	str	r3, [r7, #20]
		temp_voltage = (voltage - p_entera) * 1000;
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff fd66 	bl	8000c60 <__aeabi_ui2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	69b8      	ldr	r0, [r7, #24]
 800119a:	f7ff fcaf 	bl	8000afc <__aeabi_fsub>
 800119e:	4603      	mov	r3, r0
 80011a0:	4912      	ldr	r1, [pc, #72]	; (80011ec <main+0xd4>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7fe ffd4 	bl	8000150 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]
		p_frac = (uint32_t) temp_voltage;
 80011ac:	6938      	ldr	r0, [r7, #16]
 80011ae:	f7ff fdaf 	bl	8000d10 <__aeabi_f2uiz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]
		sprintf(str_entera, "%2d", p_entera);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <main+0xd8>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fe5a 	bl	8002e78 <siprintf>
		sprintf(str_frac, "%3d", p_frac);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	490a      	ldr	r1, [pc, #40]	; (80011f4 <main+0xdc>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fe54 	bl	8002e78 <siprintf>
	while (1) {
 80011d0:	e7b5      	b.n	800113e <main+0x26>
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	66666666 	.word	0x66666666
 80011dc:	400a6666 	.word	0x400a6666
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40affe00 	.word	0x40affe00
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	447a0000 	.word	0x447a0000
 80011f0:	08003784 	.word	0x08003784
 80011f4:	08003788 	.word	0x08003788

080011f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fe2e 	bl	8002e68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f864 	bl	800231c <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x66>
		Error_Handler();
 800125a:	f000 f889 	bl	8001370 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fad0 	bl	8002820 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x92>
		Error_Handler();
 8001286:	f000 f873 	bl	8001370 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128a:	2302      	movs	r3, #2
 800128c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800128e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001292:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fc46 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xae>
		Error_Handler();
 80012a2:	f000 f865 	bl	8001370 <Error_Handler>
	}
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	; 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_ADC1_Init+0x74>)
 80012c2:	4a19      	ldr	r2, [pc, #100]	; (8001328 <MX_ADC1_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_ADC1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_ADC1_Init+0x74>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_ADC1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_ADC1_Init+0x74>)
 80012da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012de:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_ADC1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_ADC1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_ADC1_Init+0x74>)
 80012ee:	f000 f9c3 	bl	8001678 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x4c>
		Error_Handler();
 80012f8:	f000 f83a 	bl	8001370 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001300:	2301      	movs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_ADC1_Init+0x74>)
 800130e:	f000 fb45 	bl	800199c <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001318:	f000 f82a 	bl	8001370 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000008c 	.word	0x2000008c
 8001328:	40012400 	.word	0x40012400

0800132c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_GPIO_Init+0x40>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <MX_GPIO_Init+0x40>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_GPIO_Init+0x40>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_GPIO_Init+0x40>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <MX_GPIO_Init+0x40>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <MX_GPIO_Init+0x40>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000

08001370 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_MspInit+0x5c>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_MspInit+0x5c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x5c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x60>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_MspInit+0x60>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000

080013e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_ADC_MspInit+0x6c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d121      	bne.n	8001444 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x70>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_ADC_MspInit+0x70>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_ADC_MspInit+0x70>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_ADC_MspInit+0x70>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_ADC_MspInit+0x70>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_ADC_MspInit+0x70>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001430:	2308      	movs	r3, #8
 8001432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0x74>)
 8001440:	f000 fdd0 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40012400 	.word	0x40012400
 8001450:	40021000 	.word	0x40021000
 8001454:	40010800 	.word	0x40010800

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149e:	f000 f8ab 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f001 fc9c 	bl	8002e14 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20005000 	.word	0x20005000
 8001508:	00000400 	.word	0x00000400
 800150c:	200000bc 	.word	0x200000bc
 8001510:	200000d8 	.word	0x200000d8

08001514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001546:	f7ff ffe5 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 fc69 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff fde3 	bl	8001118 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800155c:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8001560:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001564:	200000d4 	.word	0x200000d4

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 fcfd 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fef8 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fd07 	bl	8001fca <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 fcdd 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000008 	.word	0x20000008
 8001618:	200000c0 	.word	0x200000c0

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	200000c0 	.word	0x200000c0

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fff0 	bl	800161c <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffe0 	bl	800161c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008

08001678 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0be      	b.n	8001818 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d109      	bne.n	80016bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fe92 	bl	80013e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fabf 	bl	8001c40 <ADC_ConversionStop_Disable>
 80016c2:	4603      	mov	r3, r0
 80016c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8099 	bne.w	8001806 <HAL_ADC_Init+0x18e>
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 8095 	bne.w	8001806 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e4:	f023 0302 	bic.w	r3, r3, #2
 80016e8:	f043 0202 	orr.w	r2, r3, #2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7b1b      	ldrb	r3, [r3, #12]
 80016fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001700:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	4313      	orrs	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001710:	d003      	beq.n	800171a <HAL_ADC_Init+0xa2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <HAL_ADC_Init+0xa8>
 800171a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171e:	e000      	b.n	8001722 <HAL_ADC_Init+0xaa>
 8001720:	2300      	movs	r3, #0
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7d1b      	ldrb	r3, [r3, #20]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d119      	bne.n	8001764 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7b1b      	ldrb	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	3b01      	subs	r3, #1
 800173e:	035a      	lsls	r2, r3, #13
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	e00b      	b.n	8001764 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f043 0220 	orr.w	r2, r3, #32
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_ADC_Init+0x1a8>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	430b      	orrs	r3, r1
 800178a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001794:	d003      	beq.n	800179e <HAL_ADC_Init+0x126>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d104      	bne.n	80017a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051b      	lsls	r3, r3, #20
 80017a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_ADC_Init+0x1ac>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d10b      	bne.n	80017e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e2:	e018      	b.n	8001816 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f023 0312 	bic.w	r3, r3, #18
 80017ec:	f043 0210 	orr.w	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001804:	e007      	b.n	8001816 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	f043 0210 	orr.w	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	ffe1f7fd 	.word	0xffe1f7fd
 8001824:	ff1f0efe 	.word	0xff1f0efe

08001828 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_ADC_Start+0x1a>
 800183e:	2302      	movs	r3, #2
 8001840:	e098      	b.n	8001974 <HAL_ADC_Start+0x14c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f99e 	bl	8001b8c <ADC_Enable>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 8087 	bne.w	800196a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a41      	ldr	r2, [pc, #260]	; (800197c <HAL_ADC_Start+0x154>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d105      	bne.n	8001886 <HAL_ADC_Start+0x5e>
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_ADC_Start+0x158>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d026      	beq.n	80018ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b0:	e01d      	b.n	80018ee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_ADC_Start+0x158>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_Start+0xaa>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2b      	ldr	r2, [pc, #172]	; (800197c <HAL_ADC_Start+0x154>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10d      	bne.n	80018ee <HAL_ADC_Start+0xc6>
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_ADC_Start+0x158>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f023 0206 	bic.w	r2, r3, #6
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
 8001906:	e002      	b.n	800190e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0202 	mvn.w	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800192a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800192e:	d113      	bne.n	8001958 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_ADC_Start+0x154>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d105      	bne.n	8001946 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_ADC_Start+0x158>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e00c      	b.n	8001972 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e003      	b.n	8001972 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40012800 	.word	0x40012800
 8001980:	40012400 	.word	0x40012400

08001984 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x20>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e0dc      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x1da>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d81c      	bhi.n	8001a06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b05      	subs	r3, #5
 80019de:	221f      	movs	r2, #31
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b05      	subs	r3, #5
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34
 8001a04:	e03c      	b.n	8001a80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d81c      	bhi.n	8001a48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b23      	subs	r3, #35	; 0x23
 8001a20:	221f      	movs	r2, #31
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4019      	ands	r1, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b23      	subs	r3, #35	; 0x23
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
 8001a46:	e01b      	b.n	8001a80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b41      	subs	r3, #65	; 0x41
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4019      	ands	r1, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b41      	subs	r3, #65	; 0x41
 8001a74:	fa00 f203 	lsl.w	r2, r0, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	d91c      	bls.n	8001ac2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68d9      	ldr	r1, [r3, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	3b1e      	subs	r3, #30
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4019      	ands	r1, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6898      	ldr	r0, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b1e      	subs	r3, #30
 8001ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	e019      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6919      	ldr	r1, [r3, #16]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6898      	ldr	r0, [r3, #8]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d003      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b02:	2b11      	cmp	r3, #17
 8001b04:	d132      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d125      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d126      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d11a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9a      	lsrs	r2, r3, #18
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x1b2>
 8001b5a:	e007      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012400 	.word	0x40012400
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83

08001b8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d040      	beq.n	8001c2c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <ADC_Enable+0xac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <ADC_Enable+0xb0>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9b      	lsrs	r3, r3, #18
 8001bc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bc8:	e002      	b.n	8001bd0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff fd21 	bl	800161c <HAL_GetTick>
 8001bda:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bdc:	e01f      	b.n	8001c1e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bde:	f7ff fd1d 	bl	800161c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d918      	bls.n	8001c1e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d011      	beq.n	8001c1e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f043 0210 	orr.w	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e007      	b.n	8001c2e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d1d8      	bne.n	8001bde <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12e      	bne.n	8001cb8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c6a:	f7ff fcd7 	bl	800161c <HAL_GetTick>
 8001c6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c70:	e01b      	b.n	8001caa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c72:	f7ff fcd3 	bl	800161c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d914      	bls.n	8001caa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10d      	bne.n	8001caa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	f043 0210 	orr.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e007      	b.n	8001cba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d0dc      	beq.n	8001c72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e095      	b.n	8001e0e <HAL_ADCEx_Calibration_Start+0x14a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa8 	bl	8001c40 <ADC_ConversionStop_Disable>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8084 	bne.w	8001e04 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d04:	f023 0302 	bic.w	r3, r3, #2
 8001d08:	f043 0202 	orr.w	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_ADCEx_Calibration_Start+0x154>)
 8001d12:	681c      	ldr	r4, [r3, #0]
 8001d14:	2002      	movs	r0, #2
 8001d16:	f000 ffbd 	bl	8002c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001d20:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d22:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d24:	e002      	b.n	8001d2c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff2a 	bl	8001b8c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d48:	f7ff fc68 	bl	800161c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d4e:	e01b      	b.n	8001d88 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d50:	f7ff fc64 	bl	800161c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d914      	bls.n	8001d88 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f023 0312 	bic.w	r3, r3, #18
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e042      	b.n	8001e0e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1dc      	bne.n	8001d50 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0204 	orr.w	r2, r2, #4
 8001da4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001da6:	f7ff fc39 	bl	800161c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dac:	e01b      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001dae:	f7ff fc35 	bl	800161c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b0a      	cmp	r3, #10
 8001dba:	d914      	bls.n	8001de6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f023 0312 	bic.w	r3, r3, #18
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e013      	b.n	8001e0e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1dc      	bne.n	8001dae <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f023 0303 	bic.w	r3, r3, #3
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	; (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff49 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff5e 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb0 	bl	8001f38 <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	e169      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8158 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a9a      	ldr	r2, [pc, #616]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002020:	4a98      	ldr	r2, [pc, #608]	; (8002284 <HAL_GPIO_Init+0x2a0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d875      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002026:	4a98      	ldr	r2, [pc, #608]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d058      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 800202c:	4a96      	ldr	r2, [pc, #600]	; (8002288 <HAL_GPIO_Init+0x2a4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d86f      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002032:	4a96      	ldr	r2, [pc, #600]	; (800228c <HAL_GPIO_Init+0x2a8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d052      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002038:	4a94      	ldr	r2, [pc, #592]	; (800228c <HAL_GPIO_Init+0x2a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d869      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800203e:	4a94      	ldr	r2, [pc, #592]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04c      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002044:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_GPIO_Init+0x2ac>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d863      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800204a:	4a92      	ldr	r2, [pc, #584]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d046      	beq.n	80020de <HAL_GPIO_Init+0xfa>
 8002050:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_GPIO_Init+0x2b0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d85d      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d82a      	bhi.n	80020b0 <HAL_GPIO_Init+0xcc>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d859      	bhi.n	8002112 <HAL_GPIO_Init+0x12e>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <HAL_GPIO_Init+0x80>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	080020df 	.word	0x080020df
 8002068:	080020b9 	.word	0x080020b9
 800206c:	080020cb 	.word	0x080020cb
 8002070:	0800210d 	.word	0x0800210d
 8002074:	08002113 	.word	0x08002113
 8002078:	08002113 	.word	0x08002113
 800207c:	08002113 	.word	0x08002113
 8002080:	08002113 	.word	0x08002113
 8002084:	08002113 	.word	0x08002113
 8002088:	08002113 	.word	0x08002113
 800208c:	08002113 	.word	0x08002113
 8002090:	08002113 	.word	0x08002113
 8002094:	08002113 	.word	0x08002113
 8002098:	08002113 	.word	0x08002113
 800209c:	08002113 	.word	0x08002113
 80020a0:	08002113 	.word	0x08002113
 80020a4:	08002113 	.word	0x08002113
 80020a8:	080020c1 	.word	0x080020c1
 80020ac:	080020d5 	.word	0x080020d5
 80020b0:	4a79      	ldr	r2, [pc, #484]	; (8002298 <HAL_GPIO_Init+0x2b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020b6:	e02c      	b.n	8002112 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e029      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e024      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	3308      	adds	r3, #8
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e01f      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	330c      	adds	r3, #12
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e01a      	b.n	8002114 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020e6:	2304      	movs	r3, #4
 80020e8:	623b      	str	r3, [r7, #32]
          break;
 80020ea:	e013      	b.n	8002114 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	611a      	str	r2, [r3, #16]
          break;
 80020fe:	e009      	b.n	8002114 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002100:	2308      	movs	r3, #8
 8002102:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	615a      	str	r2, [r3, #20]
          break;
 800210a:	e003      	b.n	8002114 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x130>
          break;
 8002112:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d801      	bhi.n	800211e <HAL_GPIO_Init+0x13a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_Init+0x13e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d802      	bhi.n	8002130 <HAL_GPIO_Init+0x14c>
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x152>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	3b08      	subs	r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	210f      	movs	r1, #15
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	431a      	orrs	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80b1 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002164:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_GPIO_Init+0x2b8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_GPIO_Init+0x2b8>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800217c:	4a48      	ldr	r2, [pc, #288]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <HAL_GPIO_Init+0x2c0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_GPIO_Init+0x2c4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00d      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3e      	ldr	r2, [pc, #248]	; (80022ac <HAL_GPIO_Init+0x2c8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <HAL_GPIO_Init+0x2cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_GPIO_Init+0x1e0>
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021d0:	2300      	movs	r3, #0
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021e2:	492f      	ldr	r1, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x2bc>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	492c      	ldr	r1, [pc, #176]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4922      	ldr	r1, [pc, #136]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	491e      	ldr	r1, [pc, #120]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4914      	ldr	r1, [pc, #80]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d021      	beq.n	80022b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e021      	b.n	80022c6 <HAL_GPIO_Init+0x2e2>
 8002282:	bf00      	nop
 8002284:	10320000 	.word	0x10320000
 8002288:	10310000 	.word	0x10310000
 800228c:	10220000 	.word	0x10220000
 8002290:	10210000 	.word	0x10210000
 8002294:	10120000 	.word	0x10120000
 8002298:	10110000 	.word	0x10110000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <HAL_GPIO_Init+0x304>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f ae8e 	bne.w	8001ff8 <HAL_GPIO_Init+0x14>
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	372c      	adds	r7, #44	; 0x2c
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e272      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8087 	beq.w	800244a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800233c:	4b92      	ldr	r3, [pc, #584]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b04      	cmp	r3, #4
 8002346:	d00c      	beq.n	8002362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d112      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
 8002354:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06c      	beq.n	8002448 <HAL_RCC_OscConfig+0x12c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d168      	bne.n	8002448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e24c      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x76>
 8002384:	4b80      	ldr	r3, [pc, #512]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7f      	ldr	r2, [pc, #508]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	e02e      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x98>
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0xbc>
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a71      	ldr	r2, [pc, #452]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xd4>
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a67      	ldr	r2, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f910 	bl	800161c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f90c 	bl	800161c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e200      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xe4>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f8fc 	bl	800161c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f8f8 	bl	800161c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1ec      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x10c>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
 800246e:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1c0      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4939      	ldr	r1, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7ff f8b1 	bl	800161c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f8ad 	bl	800161c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1a1      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4927      	ldr	r1, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x270>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff f890 	bl	800161c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f88c 	bl	800161c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e180      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03a      	beq.n	80025a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b17      	ldr	r3, [pc, #92]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7ff f870 	bl	800161c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff f86c 	bl	800161c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e160      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x26c>)
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800255e:	2001      	movs	r0, #1
 8002560:	f000 fac4 	bl	8002aec <RCC_Delay>
 8002564:	e01c      	b.n	80025a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_OscConfig+0x274>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff f856 	bl	800161c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002572:	e00f      	b.n	8002594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff f852 	bl	800161c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d908      	bls.n	8002594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e146      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	42420000 	.word	0x42420000
 8002590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e9      	bne.n	8002574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a6 	beq.w	80026fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a87      	ldr	r2, [pc, #540]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7e      	ldr	r2, [pc, #504]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7ff f813 	bl	800161c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7ff f80f 	bl	800161c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e103      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x4c8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x312>
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a6e      	ldr	r2, [pc, #440]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e02d      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x334>
 8002636:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	e01c      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x356>
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a60      	ldr	r2, [pc, #384]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a5d      	ldr	r2, [pc, #372]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0x36e>
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a5a      	ldr	r2, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b58      	ldr	r3, [pc, #352]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d015      	beq.n	80026be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7fe ffc3 	bl	800161c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe ffbf 	bl	800161c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0b1      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ee      	beq.n	800269a <HAL_RCC_OscConfig+0x37e>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe ffad 	bl	800161c <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe ffa9 	bl	800161c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e09b      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002704:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d061      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002718:	4b33      	ldr	r3, [pc, #204]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe ff7d 	bl	800161c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe ff79 	bl	800161c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e06d      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d108      	bne.n	8002760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4921      	ldr	r1, [pc, #132]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a19      	ldr	r1, [r3, #32]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	430b      	orrs	r3, r1
 8002772:	491b      	ldr	r1, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe ff4d 	bl	800161c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe ff49 	bl	800161c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e03d      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x46a>
 80027a4:	e035      	b.n	8002812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe ff36 	bl	800161c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe ff32 	bl	800161c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e026      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x498>
 80027d2:	e01e      	b.n	8002812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e019      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x500>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0d0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d910      	bls.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800289e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d040      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d115      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e073      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4936      	ldr	r1, [pc, #216]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fe84 	bl	800161c <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fe80 	bl	800161c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e053      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d210      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 0207 	bic.w	r2, r3, #7
 8002956:	4922      	ldr	r1, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1cc>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fde2 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	080037ac 	.word	0x080037ac
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b490      	push	{r4, r7}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xac>)
 80029fc:	1d3c      	adds	r4, r7, #4
 80029fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a04:	f240 2301 	movw	r3, #513	; 0x201
 8002a08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x46>
 8002a32:	e02b      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a36:	623b      	str	r3, [r7, #32]
      break;
 8002a38:	e02b      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	443b      	add	r3, r7
 8002a46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0c5b      	lsrs	r3, r3, #17
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	3328      	adds	r3, #40	; 0x28
 8002a62:	443b      	add	r3, r7
 8002a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a6e:	fb03 f202 	mul.w	r2, r3, r2
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e004      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a8e:	623b      	str	r3, [r7, #32]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc90      	pop	{r4, r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	0800378c 	.word	0x0800378c
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	007a1200 	.word	0x007a1200
 8002aac:	003d0900 	.word	0x003d0900

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff fff2 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	080037bc 	.word	0x080037bc

08002aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <RCC_Delay+0x34>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <RCC_Delay+0x38>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a5b      	lsrs	r3, r3, #9
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b08:	bf00      	nop
  }
  while (Delay --);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	60fa      	str	r2, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <RCC_Delay+0x1c>
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20000000 	.word	0x20000000
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d07d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	61d3      	str	r3, [r2, #28]
 8002b60:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7fe fd48 	bl	800161c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe fd44 	bl	800161c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e06d      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d027      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002be2:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fd13 	bl	800161c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fd0f 	bl	800161c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e036      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ee      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4917      	ldr	r1, [pc, #92]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	490b      	ldr	r1, [pc, #44]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	42420440 	.word	0x42420440

08002c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b08d      	sub	sp, #52	; 0x34
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002c9e:	f107 040c 	add.w	r4, r7, #12
 8002ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca8:	f240 2301 	movw	r3, #513	; 0x201
 8002cac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	f200 808e 	bhi.w	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d049      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d079      	beq.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cdc:	e086      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002cde:	4b49      	ldr	r3, [pc, #292]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d07f      	beq.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	3330      	adds	r3, #48	; 0x30
 8002cfa:	443b      	add	r3, r7
 8002cfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d00:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d0c:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c5b      	lsrs	r3, r3, #17
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	3330      	adds	r3, #48	; 0x30
 8002d18:	443b      	add	r3, r7
 8002d1a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d2a:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3a:	e004      	b.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d102      	bne.n	8002d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d58:	e04a      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d68:	e042      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d108      	bne.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8c:	e01f      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d109      	bne.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002da6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dac:	e00f      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002dc6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002dcc:	e012      	b.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002dd0:	f7ff fe78 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0b9b      	lsrs	r3, r3, #14
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	3301      	adds	r3, #1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002dec:	bf00      	nop
 8002dee:	e002      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002df4:	bf00      	nop
    }
  }
  return (frequency);
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3734      	adds	r7, #52	; 0x34
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	0800379c 	.word	0x0800379c
 8002e04:	40021000 	.word	0x40021000
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	003d0900 	.word	0x003d0900
 8002e10:	aaaaaaab 	.word	0xaaaaaaab

08002e14 <__errno>:
 8002e14:	4b01      	ldr	r3, [pc, #4]	; (8002e1c <__errno+0x8>)
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 fc9c 	bl	800376c <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	080037f8 	.word	0x080037f8
 8002e5c:	080037f8 	.word	0x080037f8
 8002e60:	080037f8 	.word	0x080037f8
 8002e64:	080037fc 	.word	0x080037fc

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <siprintf>:
 8002e78:	b40e      	push	{r1, r2, r3}
 8002e7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e7e:	b500      	push	{lr}
 8002e80:	b09c      	sub	sp, #112	; 0x70
 8002e82:	ab1d      	add	r3, sp, #116	; 0x74
 8002e84:	9002      	str	r0, [sp, #8]
 8002e86:	9006      	str	r0, [sp, #24]
 8002e88:	9107      	str	r1, [sp, #28]
 8002e8a:	9104      	str	r1, [sp, #16]
 8002e8c:	4808      	ldr	r0, [pc, #32]	; (8002eb0 <siprintf+0x38>)
 8002e8e:	4909      	ldr	r1, [pc, #36]	; (8002eb4 <siprintf+0x3c>)
 8002e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e94:	9105      	str	r1, [sp, #20]
 8002e96:	6800      	ldr	r0, [r0, #0]
 8002e98:	a902      	add	r1, sp, #8
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	f000 f868 	bl	8002f70 <_svfiprintf_r>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	9b02      	ldr	r3, [sp, #8]
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	b01c      	add	sp, #112	; 0x70
 8002ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eac:	b003      	add	sp, #12
 8002eae:	4770      	bx	lr
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	ffff0208 	.word	0xffff0208

08002eb8 <__ssputs_r>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	688e      	ldr	r6, [r1, #8]
 8002ebe:	4682      	mov	sl, r0
 8002ec0:	429e      	cmp	r6, r3
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4690      	mov	r8, r2
 8002ec6:	461f      	mov	r7, r3
 8002ec8:	d838      	bhi.n	8002f3c <__ssputs_r+0x84>
 8002eca:	898a      	ldrh	r2, [r1, #12]
 8002ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ed0:	d032      	beq.n	8002f38 <__ssputs_r+0x80>
 8002ed2:	6825      	ldr	r5, [r4, #0]
 8002ed4:	6909      	ldr	r1, [r1, #16]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	eba5 0901 	sub.w	r9, r5, r1
 8002edc:	6965      	ldr	r5, [r4, #20]
 8002ede:	444b      	add	r3, r9
 8002ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ee8:	106d      	asrs	r5, r5, #1
 8002eea:	429d      	cmp	r5, r3
 8002eec:	bf38      	it	cc
 8002eee:	461d      	movcc	r5, r3
 8002ef0:	0553      	lsls	r3, r2, #21
 8002ef2:	d531      	bpl.n	8002f58 <__ssputs_r+0xa0>
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f000 fb6f 	bl	80035d8 <_malloc_r>
 8002efa:	4606      	mov	r6, r0
 8002efc:	b950      	cbnz	r0, 8002f14 <__ssputs_r+0x5c>
 8002efe:	230c      	movs	r3, #12
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f04:	f8ca 3000 	str.w	r3, [sl]
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0e:	81a3      	strh	r3, [r4, #12]
 8002f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f14:	464a      	mov	r2, r9
 8002f16:	6921      	ldr	r1, [r4, #16]
 8002f18:	f000 face 	bl	80034b8 <memcpy>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	6126      	str	r6, [r4, #16]
 8002f2a:	444e      	add	r6, r9
 8002f2c:	6026      	str	r6, [r4, #0]
 8002f2e:	463e      	mov	r6, r7
 8002f30:	6165      	str	r5, [r4, #20]
 8002f32:	eba5 0509 	sub.w	r5, r5, r9
 8002f36:	60a5      	str	r5, [r4, #8]
 8002f38:	42be      	cmp	r6, r7
 8002f3a:	d900      	bls.n	8002f3e <__ssputs_r+0x86>
 8002f3c:	463e      	mov	r6, r7
 8002f3e:	4632      	mov	r2, r6
 8002f40:	4641      	mov	r1, r8
 8002f42:	6820      	ldr	r0, [r4, #0]
 8002f44:	f000 fac6 	bl	80034d4 <memmove>
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	1b9b      	subs	r3, r3, r6
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	4433      	add	r3, r6
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	e7db      	b.n	8002f10 <__ssputs_r+0x58>
 8002f58:	462a      	mov	r2, r5
 8002f5a:	f000 fbb1 	bl	80036c0 <_realloc_r>
 8002f5e:	4606      	mov	r6, r0
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1e1      	bne.n	8002f28 <__ssputs_r+0x70>
 8002f64:	4650      	mov	r0, sl
 8002f66:	6921      	ldr	r1, [r4, #16]
 8002f68:	f000 face 	bl	8003508 <_free_r>
 8002f6c:	e7c7      	b.n	8002efe <__ssputs_r+0x46>
	...

08002f70 <_svfiprintf_r>:
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	4698      	mov	r8, r3
 8002f76:	898b      	ldrh	r3, [r1, #12]
 8002f78:	4607      	mov	r7, r0
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	460d      	mov	r5, r1
 8002f7e:	4614      	mov	r4, r2
 8002f80:	b09d      	sub	sp, #116	; 0x74
 8002f82:	d50e      	bpl.n	8002fa2 <_svfiprintf_r+0x32>
 8002f84:	690b      	ldr	r3, [r1, #16]
 8002f86:	b963      	cbnz	r3, 8002fa2 <_svfiprintf_r+0x32>
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	f000 fb25 	bl	80035d8 <_malloc_r>
 8002f8e:	6028      	str	r0, [r5, #0]
 8002f90:	6128      	str	r0, [r5, #16]
 8002f92:	b920      	cbnz	r0, 8002f9e <_svfiprintf_r+0x2e>
 8002f94:	230c      	movs	r3, #12
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9c:	e0d1      	b.n	8003142 <_svfiprintf_r+0x1d2>
 8002f9e:	2340      	movs	r3, #64	; 0x40
 8002fa0:	616b      	str	r3, [r5, #20]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fac:	2330      	movs	r3, #48	; 0x30
 8002fae:	f04f 0901 	mov.w	r9, #1
 8002fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800315c <_svfiprintf_r+0x1ec>
 8002fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	469a      	mov	sl, r3
 8002fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fc6:	b10a      	cbz	r2, 8002fcc <_svfiprintf_r+0x5c>
 8002fc8:	2a25      	cmp	r2, #37	; 0x25
 8002fca:	d1f9      	bne.n	8002fc0 <_svfiprintf_r+0x50>
 8002fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8002fd0:	d00b      	beq.n	8002fea <_svfiprintf_r+0x7a>
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f7ff ff6d 	bl	8002eb8 <__ssputs_r>
 8002fde:	3001      	adds	r0, #1
 8002fe0:	f000 80aa 	beq.w	8003138 <_svfiprintf_r+0x1c8>
 8002fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fe6:	445a      	add	r2, fp
 8002fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8002fea:	f89a 3000 	ldrb.w	r3, [sl]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a2 	beq.w	8003138 <_svfiprintf_r+0x1c8>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ffe:	f10a 0a01 	add.w	sl, sl, #1
 8003002:	9304      	str	r3, [sp, #16]
 8003004:	9307      	str	r3, [sp, #28]
 8003006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800300a:	931a      	str	r3, [sp, #104]	; 0x68
 800300c:	4654      	mov	r4, sl
 800300e:	2205      	movs	r2, #5
 8003010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003014:	4851      	ldr	r0, [pc, #324]	; (800315c <_svfiprintf_r+0x1ec>)
 8003016:	f000 fa41 	bl	800349c <memchr>
 800301a:	9a04      	ldr	r2, [sp, #16]
 800301c:	b9d8      	cbnz	r0, 8003056 <_svfiprintf_r+0xe6>
 800301e:	06d0      	lsls	r0, r2, #27
 8003020:	bf44      	itt	mi
 8003022:	2320      	movmi	r3, #32
 8003024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003028:	0711      	lsls	r1, r2, #28
 800302a:	bf44      	itt	mi
 800302c:	232b      	movmi	r3, #43	; 0x2b
 800302e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003032:	f89a 3000 	ldrb.w	r3, [sl]
 8003036:	2b2a      	cmp	r3, #42	; 0x2a
 8003038:	d015      	beq.n	8003066 <_svfiprintf_r+0xf6>
 800303a:	4654      	mov	r4, sl
 800303c:	2000      	movs	r0, #0
 800303e:	f04f 0c0a 	mov.w	ip, #10
 8003042:	9a07      	ldr	r2, [sp, #28]
 8003044:	4621      	mov	r1, r4
 8003046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800304a:	3b30      	subs	r3, #48	; 0x30
 800304c:	2b09      	cmp	r3, #9
 800304e:	d94e      	bls.n	80030ee <_svfiprintf_r+0x17e>
 8003050:	b1b0      	cbz	r0, 8003080 <_svfiprintf_r+0x110>
 8003052:	9207      	str	r2, [sp, #28]
 8003054:	e014      	b.n	8003080 <_svfiprintf_r+0x110>
 8003056:	eba0 0308 	sub.w	r3, r0, r8
 800305a:	fa09 f303 	lsl.w	r3, r9, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	46a2      	mov	sl, r4
 8003062:	9304      	str	r3, [sp, #16]
 8003064:	e7d2      	b.n	800300c <_svfiprintf_r+0x9c>
 8003066:	9b03      	ldr	r3, [sp, #12]
 8003068:	1d19      	adds	r1, r3, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	9103      	str	r1, [sp, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfbb      	ittet	lt
 8003072:	425b      	neglt	r3, r3
 8003074:	f042 0202 	orrlt.w	r2, r2, #2
 8003078:	9307      	strge	r3, [sp, #28]
 800307a:	9307      	strlt	r3, [sp, #28]
 800307c:	bfb8      	it	lt
 800307e:	9204      	strlt	r2, [sp, #16]
 8003080:	7823      	ldrb	r3, [r4, #0]
 8003082:	2b2e      	cmp	r3, #46	; 0x2e
 8003084:	d10c      	bne.n	80030a0 <_svfiprintf_r+0x130>
 8003086:	7863      	ldrb	r3, [r4, #1]
 8003088:	2b2a      	cmp	r3, #42	; 0x2a
 800308a:	d135      	bne.n	80030f8 <_svfiprintf_r+0x188>
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	3402      	adds	r4, #2
 8003090:	1d1a      	adds	r2, r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	9203      	str	r2, [sp, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	bfb8      	it	lt
 800309a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003160 <_svfiprintf_r+0x1f0>
 80030a4:	2203      	movs	r2, #3
 80030a6:	4650      	mov	r0, sl
 80030a8:	7821      	ldrb	r1, [r4, #0]
 80030aa:	f000 f9f7 	bl	800349c <memchr>
 80030ae:	b140      	cbz	r0, 80030c2 <_svfiprintf_r+0x152>
 80030b0:	2340      	movs	r3, #64	; 0x40
 80030b2:	eba0 000a 	sub.w	r0, r0, sl
 80030b6:	fa03 f000 	lsl.w	r0, r3, r0
 80030ba:	9b04      	ldr	r3, [sp, #16]
 80030bc:	3401      	adds	r4, #1
 80030be:	4303      	orrs	r3, r0
 80030c0:	9304      	str	r3, [sp, #16]
 80030c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c6:	2206      	movs	r2, #6
 80030c8:	4826      	ldr	r0, [pc, #152]	; (8003164 <_svfiprintf_r+0x1f4>)
 80030ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030ce:	f000 f9e5 	bl	800349c <memchr>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d038      	beq.n	8003148 <_svfiprintf_r+0x1d8>
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <_svfiprintf_r+0x1f8>)
 80030d8:	bb1b      	cbnz	r3, 8003122 <_svfiprintf_r+0x1b2>
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	3307      	adds	r3, #7
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	3308      	adds	r3, #8
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e8:	4433      	add	r3, r6
 80030ea:	9309      	str	r3, [sp, #36]	; 0x24
 80030ec:	e767      	b.n	8002fbe <_svfiprintf_r+0x4e>
 80030ee:	460c      	mov	r4, r1
 80030f0:	2001      	movs	r0, #1
 80030f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80030f6:	e7a5      	b.n	8003044 <_svfiprintf_r+0xd4>
 80030f8:	2300      	movs	r3, #0
 80030fa:	f04f 0c0a 	mov.w	ip, #10
 80030fe:	4619      	mov	r1, r3
 8003100:	3401      	adds	r4, #1
 8003102:	9305      	str	r3, [sp, #20]
 8003104:	4620      	mov	r0, r4
 8003106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800310a:	3a30      	subs	r2, #48	; 0x30
 800310c:	2a09      	cmp	r2, #9
 800310e:	d903      	bls.n	8003118 <_svfiprintf_r+0x1a8>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0c5      	beq.n	80030a0 <_svfiprintf_r+0x130>
 8003114:	9105      	str	r1, [sp, #20]
 8003116:	e7c3      	b.n	80030a0 <_svfiprintf_r+0x130>
 8003118:	4604      	mov	r4, r0
 800311a:	2301      	movs	r3, #1
 800311c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003120:	e7f0      	b.n	8003104 <_svfiprintf_r+0x194>
 8003122:	ab03      	add	r3, sp, #12
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	462a      	mov	r2, r5
 8003128:	4638      	mov	r0, r7
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_svfiprintf_r+0x1fc>)
 800312c:	a904      	add	r1, sp, #16
 800312e:	f3af 8000 	nop.w
 8003132:	1c42      	adds	r2, r0, #1
 8003134:	4606      	mov	r6, r0
 8003136:	d1d6      	bne.n	80030e6 <_svfiprintf_r+0x176>
 8003138:	89ab      	ldrh	r3, [r5, #12]
 800313a:	065b      	lsls	r3, r3, #25
 800313c:	f53f af2c 	bmi.w	8002f98 <_svfiprintf_r+0x28>
 8003140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003142:	b01d      	add	sp, #116	; 0x74
 8003144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003148:	ab03      	add	r3, sp, #12
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	462a      	mov	r2, r5
 800314e:	4638      	mov	r0, r7
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <_svfiprintf_r+0x1fc>)
 8003152:	a904      	add	r1, sp, #16
 8003154:	f000 f87c 	bl	8003250 <_printf_i>
 8003158:	e7eb      	b.n	8003132 <_svfiprintf_r+0x1c2>
 800315a:	bf00      	nop
 800315c:	080037c4 	.word	0x080037c4
 8003160:	080037ca 	.word	0x080037ca
 8003164:	080037ce 	.word	0x080037ce
 8003168:	00000000 	.word	0x00000000
 800316c:	08002eb9 	.word	0x08002eb9

08003170 <_printf_common>:
 8003170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	4616      	mov	r6, r2
 8003176:	4699      	mov	r9, r3
 8003178:	688a      	ldr	r2, [r1, #8]
 800317a:	690b      	ldr	r3, [r1, #16]
 800317c:	4607      	mov	r7, r0
 800317e:	4293      	cmp	r3, r2
 8003180:	bfb8      	it	lt
 8003182:	4613      	movlt	r3, r2
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800318a:	460c      	mov	r4, r1
 800318c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003190:	b10a      	cbz	r2, 8003196 <_printf_common+0x26>
 8003192:	3301      	adds	r3, #1
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	0699      	lsls	r1, r3, #26
 800319a:	bf42      	ittt	mi
 800319c:	6833      	ldrmi	r3, [r6, #0]
 800319e:	3302      	addmi	r3, #2
 80031a0:	6033      	strmi	r3, [r6, #0]
 80031a2:	6825      	ldr	r5, [r4, #0]
 80031a4:	f015 0506 	ands.w	r5, r5, #6
 80031a8:	d106      	bne.n	80031b8 <_printf_common+0x48>
 80031aa:	f104 0a19 	add.w	sl, r4, #25
 80031ae:	68e3      	ldr	r3, [r4, #12]
 80031b0:	6832      	ldr	r2, [r6, #0]
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	42ab      	cmp	r3, r5
 80031b6:	dc28      	bgt.n	800320a <_printf_common+0x9a>
 80031b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031bc:	1e13      	subs	r3, r2, #0
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	bf18      	it	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	0692      	lsls	r2, r2, #26
 80031c6:	d42d      	bmi.n	8003224 <_printf_common+0xb4>
 80031c8:	4649      	mov	r1, r9
 80031ca:	4638      	mov	r0, r7
 80031cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031d0:	47c0      	blx	r8
 80031d2:	3001      	adds	r0, #1
 80031d4:	d020      	beq.n	8003218 <_printf_common+0xa8>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	68e5      	ldr	r5, [r4, #12]
 80031da:	f003 0306 	and.w	r3, r3, #6
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf18      	it	ne
 80031e2:	2500      	movne	r5, #0
 80031e4:	6832      	ldr	r2, [r6, #0]
 80031e6:	f04f 0600 	mov.w	r6, #0
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	bf08      	it	eq
 80031ee:	1aad      	subeq	r5, r5, r2
 80031f0:	6922      	ldr	r2, [r4, #16]
 80031f2:	bf08      	it	eq
 80031f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bfc4      	itt	gt
 80031fc:	1a9b      	subgt	r3, r3, r2
 80031fe:	18ed      	addgt	r5, r5, r3
 8003200:	341a      	adds	r4, #26
 8003202:	42b5      	cmp	r5, r6
 8003204:	d11a      	bne.n	800323c <_printf_common+0xcc>
 8003206:	2000      	movs	r0, #0
 8003208:	e008      	b.n	800321c <_printf_common+0xac>
 800320a:	2301      	movs	r3, #1
 800320c:	4652      	mov	r2, sl
 800320e:	4649      	mov	r1, r9
 8003210:	4638      	mov	r0, r7
 8003212:	47c0      	blx	r8
 8003214:	3001      	adds	r0, #1
 8003216:	d103      	bne.n	8003220 <_printf_common+0xb0>
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	3501      	adds	r5, #1
 8003222:	e7c4      	b.n	80031ae <_printf_common+0x3e>
 8003224:	2030      	movs	r0, #48	; 0x30
 8003226:	18e1      	adds	r1, r4, r3
 8003228:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003232:	4422      	add	r2, r4
 8003234:	3302      	adds	r3, #2
 8003236:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800323a:	e7c5      	b.n	80031c8 <_printf_common+0x58>
 800323c:	2301      	movs	r3, #1
 800323e:	4622      	mov	r2, r4
 8003240:	4649      	mov	r1, r9
 8003242:	4638      	mov	r0, r7
 8003244:	47c0      	blx	r8
 8003246:	3001      	adds	r0, #1
 8003248:	d0e6      	beq.n	8003218 <_printf_common+0xa8>
 800324a:	3601      	adds	r6, #1
 800324c:	e7d9      	b.n	8003202 <_printf_common+0x92>
	...

08003250 <_printf_i>:
 8003250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	7e0f      	ldrb	r7, [r1, #24]
 8003256:	4691      	mov	r9, r2
 8003258:	2f78      	cmp	r7, #120	; 0x78
 800325a:	4680      	mov	r8, r0
 800325c:	460c      	mov	r4, r1
 800325e:	469a      	mov	sl, r3
 8003260:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003266:	d807      	bhi.n	8003278 <_printf_i+0x28>
 8003268:	2f62      	cmp	r7, #98	; 0x62
 800326a:	d80a      	bhi.n	8003282 <_printf_i+0x32>
 800326c:	2f00      	cmp	r7, #0
 800326e:	f000 80d9 	beq.w	8003424 <_printf_i+0x1d4>
 8003272:	2f58      	cmp	r7, #88	; 0x58
 8003274:	f000 80a4 	beq.w	80033c0 <_printf_i+0x170>
 8003278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800327c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003280:	e03a      	b.n	80032f8 <_printf_i+0xa8>
 8003282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003286:	2b15      	cmp	r3, #21
 8003288:	d8f6      	bhi.n	8003278 <_printf_i+0x28>
 800328a:	a101      	add	r1, pc, #4	; (adr r1, 8003290 <_printf_i+0x40>)
 800328c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003290:	080032e9 	.word	0x080032e9
 8003294:	080032fd 	.word	0x080032fd
 8003298:	08003279 	.word	0x08003279
 800329c:	08003279 	.word	0x08003279
 80032a0:	08003279 	.word	0x08003279
 80032a4:	08003279 	.word	0x08003279
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	08003279 	.word	0x08003279
 80032b0:	08003279 	.word	0x08003279
 80032b4:	08003279 	.word	0x08003279
 80032b8:	08003279 	.word	0x08003279
 80032bc:	0800340b 	.word	0x0800340b
 80032c0:	0800332d 	.word	0x0800332d
 80032c4:	080033ed 	.word	0x080033ed
 80032c8:	08003279 	.word	0x08003279
 80032cc:	08003279 	.word	0x08003279
 80032d0:	0800342d 	.word	0x0800342d
 80032d4:	08003279 	.word	0x08003279
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	08003279 	.word	0x08003279
 80032e0:	08003279 	.word	0x08003279
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	1d1a      	adds	r2, r3, #4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	602a      	str	r2, [r5, #0]
 80032f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0a4      	b.n	8003446 <_printf_i+0x1f6>
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	6829      	ldr	r1, [r5, #0]
 8003300:	0606      	lsls	r6, r0, #24
 8003302:	f101 0304 	add.w	r3, r1, #4
 8003306:	d50a      	bpl.n	800331e <_printf_i+0xce>
 8003308:	680e      	ldr	r6, [r1, #0]
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	2e00      	cmp	r6, #0
 800330e:	da03      	bge.n	8003318 <_printf_i+0xc8>
 8003310:	232d      	movs	r3, #45	; 0x2d
 8003312:	4276      	negs	r6, r6
 8003314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003318:	230a      	movs	r3, #10
 800331a:	485e      	ldr	r0, [pc, #376]	; (8003494 <_printf_i+0x244>)
 800331c:	e019      	b.n	8003352 <_printf_i+0x102>
 800331e:	680e      	ldr	r6, [r1, #0]
 8003320:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	bf18      	it	ne
 8003328:	b236      	sxthne	r6, r6
 800332a:	e7ef      	b.n	800330c <_printf_i+0xbc>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1d19      	adds	r1, r3, #4
 8003332:	6029      	str	r1, [r5, #0]
 8003334:	0601      	lsls	r1, r0, #24
 8003336:	d501      	bpl.n	800333c <_printf_i+0xec>
 8003338:	681e      	ldr	r6, [r3, #0]
 800333a:	e002      	b.n	8003342 <_printf_i+0xf2>
 800333c:	0646      	lsls	r6, r0, #25
 800333e:	d5fb      	bpl.n	8003338 <_printf_i+0xe8>
 8003340:	881e      	ldrh	r6, [r3, #0]
 8003342:	2f6f      	cmp	r7, #111	; 0x6f
 8003344:	bf0c      	ite	eq
 8003346:	2308      	moveq	r3, #8
 8003348:	230a      	movne	r3, #10
 800334a:	4852      	ldr	r0, [pc, #328]	; (8003494 <_printf_i+0x244>)
 800334c:	2100      	movs	r1, #0
 800334e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003352:	6865      	ldr	r5, [r4, #4]
 8003354:	2d00      	cmp	r5, #0
 8003356:	bfa8      	it	ge
 8003358:	6821      	ldrge	r1, [r4, #0]
 800335a:	60a5      	str	r5, [r4, #8]
 800335c:	bfa4      	itt	ge
 800335e:	f021 0104 	bicge.w	r1, r1, #4
 8003362:	6021      	strge	r1, [r4, #0]
 8003364:	b90e      	cbnz	r6, 800336a <_printf_i+0x11a>
 8003366:	2d00      	cmp	r5, #0
 8003368:	d04d      	beq.n	8003406 <_printf_i+0x1b6>
 800336a:	4615      	mov	r5, r2
 800336c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003370:	fb03 6711 	mls	r7, r3, r1, r6
 8003374:	5dc7      	ldrb	r7, [r0, r7]
 8003376:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800337a:	4637      	mov	r7, r6
 800337c:	42bb      	cmp	r3, r7
 800337e:	460e      	mov	r6, r1
 8003380:	d9f4      	bls.n	800336c <_printf_i+0x11c>
 8003382:	2b08      	cmp	r3, #8
 8003384:	d10b      	bne.n	800339e <_printf_i+0x14e>
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	07de      	lsls	r6, r3, #31
 800338a:	d508      	bpl.n	800339e <_printf_i+0x14e>
 800338c:	6923      	ldr	r3, [r4, #16]
 800338e:	6861      	ldr	r1, [r4, #4]
 8003390:	4299      	cmp	r1, r3
 8003392:	bfde      	ittt	le
 8003394:	2330      	movle	r3, #48	; 0x30
 8003396:	f805 3c01 	strble.w	r3, [r5, #-1]
 800339a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800339e:	1b52      	subs	r2, r2, r5
 80033a0:	6122      	str	r2, [r4, #16]
 80033a2:	464b      	mov	r3, r9
 80033a4:	4621      	mov	r1, r4
 80033a6:	4640      	mov	r0, r8
 80033a8:	f8cd a000 	str.w	sl, [sp]
 80033ac:	aa03      	add	r2, sp, #12
 80033ae:	f7ff fedf 	bl	8003170 <_printf_common>
 80033b2:	3001      	adds	r0, #1
 80033b4:	d14c      	bne.n	8003450 <_printf_i+0x200>
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ba:	b004      	add	sp, #16
 80033bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c0:	4834      	ldr	r0, [pc, #208]	; (8003494 <_printf_i+0x244>)
 80033c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033c6:	6829      	ldr	r1, [r5, #0]
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80033ce:	6029      	str	r1, [r5, #0]
 80033d0:	061d      	lsls	r5, r3, #24
 80033d2:	d514      	bpl.n	80033fe <_printf_i+0x1ae>
 80033d4:	07df      	lsls	r7, r3, #31
 80033d6:	bf44      	itt	mi
 80033d8:	f043 0320 	orrmi.w	r3, r3, #32
 80033dc:	6023      	strmi	r3, [r4, #0]
 80033de:	b91e      	cbnz	r6, 80033e8 <_printf_i+0x198>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	f023 0320 	bic.w	r3, r3, #32
 80033e6:	6023      	str	r3, [r4, #0]
 80033e8:	2310      	movs	r3, #16
 80033ea:	e7af      	b.n	800334c <_printf_i+0xfc>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	f043 0320 	orr.w	r3, r3, #32
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	2378      	movs	r3, #120	; 0x78
 80033f6:	4828      	ldr	r0, [pc, #160]	; (8003498 <_printf_i+0x248>)
 80033f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033fc:	e7e3      	b.n	80033c6 <_printf_i+0x176>
 80033fe:	0659      	lsls	r1, r3, #25
 8003400:	bf48      	it	mi
 8003402:	b2b6      	uxthmi	r6, r6
 8003404:	e7e6      	b.n	80033d4 <_printf_i+0x184>
 8003406:	4615      	mov	r5, r2
 8003408:	e7bb      	b.n	8003382 <_printf_i+0x132>
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	6826      	ldr	r6, [r4, #0]
 800340e:	1d18      	adds	r0, r3, #4
 8003410:	6961      	ldr	r1, [r4, #20]
 8003412:	6028      	str	r0, [r5, #0]
 8003414:	0635      	lsls	r5, r6, #24
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	d501      	bpl.n	800341e <_printf_i+0x1ce>
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	e002      	b.n	8003424 <_printf_i+0x1d4>
 800341e:	0670      	lsls	r0, r6, #25
 8003420:	d5fb      	bpl.n	800341a <_printf_i+0x1ca>
 8003422:	8019      	strh	r1, [r3, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	4615      	mov	r5, r2
 8003428:	6123      	str	r3, [r4, #16]
 800342a:	e7ba      	b.n	80033a2 <_printf_i+0x152>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	1d1a      	adds	r2, r3, #4
 8003432:	602a      	str	r2, [r5, #0]
 8003434:	681d      	ldr	r5, [r3, #0]
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	4628      	mov	r0, r5
 800343a:	f000 f82f 	bl	800349c <memchr>
 800343e:	b108      	cbz	r0, 8003444 <_printf_i+0x1f4>
 8003440:	1b40      	subs	r0, r0, r5
 8003442:	6060      	str	r0, [r4, #4]
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	2300      	movs	r3, #0
 800344a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800344e:	e7a8      	b.n	80033a2 <_printf_i+0x152>
 8003450:	462a      	mov	r2, r5
 8003452:	4649      	mov	r1, r9
 8003454:	4640      	mov	r0, r8
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	47d0      	blx	sl
 800345a:	3001      	adds	r0, #1
 800345c:	d0ab      	beq.n	80033b6 <_printf_i+0x166>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	079b      	lsls	r3, r3, #30
 8003462:	d413      	bmi.n	800348c <_printf_i+0x23c>
 8003464:	68e0      	ldr	r0, [r4, #12]
 8003466:	9b03      	ldr	r3, [sp, #12]
 8003468:	4298      	cmp	r0, r3
 800346a:	bfb8      	it	lt
 800346c:	4618      	movlt	r0, r3
 800346e:	e7a4      	b.n	80033ba <_printf_i+0x16a>
 8003470:	2301      	movs	r3, #1
 8003472:	4632      	mov	r2, r6
 8003474:	4649      	mov	r1, r9
 8003476:	4640      	mov	r0, r8
 8003478:	47d0      	blx	sl
 800347a:	3001      	adds	r0, #1
 800347c:	d09b      	beq.n	80033b6 <_printf_i+0x166>
 800347e:	3501      	adds	r5, #1
 8003480:	68e3      	ldr	r3, [r4, #12]
 8003482:	9903      	ldr	r1, [sp, #12]
 8003484:	1a5b      	subs	r3, r3, r1
 8003486:	42ab      	cmp	r3, r5
 8003488:	dcf2      	bgt.n	8003470 <_printf_i+0x220>
 800348a:	e7eb      	b.n	8003464 <_printf_i+0x214>
 800348c:	2500      	movs	r5, #0
 800348e:	f104 0619 	add.w	r6, r4, #25
 8003492:	e7f5      	b.n	8003480 <_printf_i+0x230>
 8003494:	080037d5 	.word	0x080037d5
 8003498:	080037e6 	.word	0x080037e6

0800349c <memchr>:
 800349c:	4603      	mov	r3, r0
 800349e:	b510      	push	{r4, lr}
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	4402      	add	r2, r0
 80034a4:	4293      	cmp	r3, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	d101      	bne.n	80034ae <memchr+0x12>
 80034aa:	2000      	movs	r0, #0
 80034ac:	e003      	b.n	80034b6 <memchr+0x1a>
 80034ae:	7804      	ldrb	r4, [r0, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	428c      	cmp	r4, r1
 80034b4:	d1f6      	bne.n	80034a4 <memchr+0x8>
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <memcpy>:
 80034b8:	440a      	add	r2, r1
 80034ba:	4291      	cmp	r1, r2
 80034bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80034c0:	d100      	bne.n	80034c4 <memcpy+0xc>
 80034c2:	4770      	bx	lr
 80034c4:	b510      	push	{r4, lr}
 80034c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ca:	4291      	cmp	r1, r2
 80034cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d0:	d1f9      	bne.n	80034c6 <memcpy+0xe>
 80034d2:	bd10      	pop	{r4, pc}

080034d4 <memmove>:
 80034d4:	4288      	cmp	r0, r1
 80034d6:	b510      	push	{r4, lr}
 80034d8:	eb01 0402 	add.w	r4, r1, r2
 80034dc:	d902      	bls.n	80034e4 <memmove+0x10>
 80034de:	4284      	cmp	r4, r0
 80034e0:	4623      	mov	r3, r4
 80034e2:	d807      	bhi.n	80034f4 <memmove+0x20>
 80034e4:	1e43      	subs	r3, r0, #1
 80034e6:	42a1      	cmp	r1, r4
 80034e8:	d008      	beq.n	80034fc <memmove+0x28>
 80034ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034f2:	e7f8      	b.n	80034e6 <memmove+0x12>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4402      	add	r2, r0
 80034f8:	428a      	cmp	r2, r1
 80034fa:	d100      	bne.n	80034fe <memmove+0x2a>
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003506:	e7f7      	b.n	80034f8 <memmove+0x24>

08003508 <_free_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4605      	mov	r5, r0
 800350c:	2900      	cmp	r1, #0
 800350e:	d040      	beq.n	8003592 <_free_r+0x8a>
 8003510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003514:	1f0c      	subs	r4, r1, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	18e4      	addlt	r4, r4, r3
 800351c:	f000 f910 	bl	8003740 <__malloc_lock>
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <_free_r+0x8c>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	b933      	cbnz	r3, 8003534 <_free_r+0x2c>
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	6014      	str	r4, [r2, #0]
 800352a:	4628      	mov	r0, r5
 800352c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003530:	f000 b90c 	b.w	800374c <__malloc_unlock>
 8003534:	42a3      	cmp	r3, r4
 8003536:	d908      	bls.n	800354a <_free_r+0x42>
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	1821      	adds	r1, r4, r0
 800353c:	428b      	cmp	r3, r1
 800353e:	bf01      	itttt	eq
 8003540:	6819      	ldreq	r1, [r3, #0]
 8003542:	685b      	ldreq	r3, [r3, #4]
 8003544:	1809      	addeq	r1, r1, r0
 8003546:	6021      	streq	r1, [r4, #0]
 8003548:	e7ed      	b.n	8003526 <_free_r+0x1e>
 800354a:	461a      	mov	r2, r3
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b10b      	cbz	r3, 8003554 <_free_r+0x4c>
 8003550:	42a3      	cmp	r3, r4
 8003552:	d9fa      	bls.n	800354a <_free_r+0x42>
 8003554:	6811      	ldr	r1, [r2, #0]
 8003556:	1850      	adds	r0, r2, r1
 8003558:	42a0      	cmp	r0, r4
 800355a:	d10b      	bne.n	8003574 <_free_r+0x6c>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	4401      	add	r1, r0
 8003560:	1850      	adds	r0, r2, r1
 8003562:	4283      	cmp	r3, r0
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	d1e0      	bne.n	800352a <_free_r+0x22>
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4401      	add	r1, r0
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	e7da      	b.n	800352a <_free_r+0x22>
 8003574:	d902      	bls.n	800357c <_free_r+0x74>
 8003576:	230c      	movs	r3, #12
 8003578:	602b      	str	r3, [r5, #0]
 800357a:	e7d6      	b.n	800352a <_free_r+0x22>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	1821      	adds	r1, r4, r0
 8003580:	428b      	cmp	r3, r1
 8003582:	bf01      	itttt	eq
 8003584:	6819      	ldreq	r1, [r3, #0]
 8003586:	685b      	ldreq	r3, [r3, #4]
 8003588:	1809      	addeq	r1, r1, r0
 800358a:	6021      	streq	r1, [r4, #0]
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	6054      	str	r4, [r2, #4]
 8003590:	e7cb      	b.n	800352a <_free_r+0x22>
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	200000c4 	.word	0x200000c4

08003598 <sbrk_aligned>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4e0e      	ldr	r6, [pc, #56]	; (80035d4 <sbrk_aligned+0x3c>)
 800359c:	460c      	mov	r4, r1
 800359e:	6831      	ldr	r1, [r6, #0]
 80035a0:	4605      	mov	r5, r0
 80035a2:	b911      	cbnz	r1, 80035aa <sbrk_aligned+0x12>
 80035a4:	f000 f8bc 	bl	8003720 <_sbrk_r>
 80035a8:	6030      	str	r0, [r6, #0]
 80035aa:	4621      	mov	r1, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	f000 f8b7 	bl	8003720 <_sbrk_r>
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d00a      	beq.n	80035cc <sbrk_aligned+0x34>
 80035b6:	1cc4      	adds	r4, r0, #3
 80035b8:	f024 0403 	bic.w	r4, r4, #3
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d007      	beq.n	80035d0 <sbrk_aligned+0x38>
 80035c0:	1a21      	subs	r1, r4, r0
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 f8ac 	bl	8003720 <_sbrk_r>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d101      	bne.n	80035d0 <sbrk_aligned+0x38>
 80035cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80035d0:	4620      	mov	r0, r4
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	200000c8 	.word	0x200000c8

080035d8 <_malloc_r>:
 80035d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035dc:	1ccd      	adds	r5, r1, #3
 80035de:	f025 0503 	bic.w	r5, r5, #3
 80035e2:	3508      	adds	r5, #8
 80035e4:	2d0c      	cmp	r5, #12
 80035e6:	bf38      	it	cc
 80035e8:	250c      	movcc	r5, #12
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	4607      	mov	r7, r0
 80035ee:	db01      	blt.n	80035f4 <_malloc_r+0x1c>
 80035f0:	42a9      	cmp	r1, r5
 80035f2:	d905      	bls.n	8003600 <_malloc_r+0x28>
 80035f4:	230c      	movs	r3, #12
 80035f6:	2600      	movs	r6, #0
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4630      	mov	r0, r6
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	4e2e      	ldr	r6, [pc, #184]	; (80036bc <_malloc_r+0xe4>)
 8003602:	f000 f89d 	bl	8003740 <__malloc_lock>
 8003606:	6833      	ldr	r3, [r6, #0]
 8003608:	461c      	mov	r4, r3
 800360a:	bb34      	cbnz	r4, 800365a <_malloc_r+0x82>
 800360c:	4629      	mov	r1, r5
 800360e:	4638      	mov	r0, r7
 8003610:	f7ff ffc2 	bl	8003598 <sbrk_aligned>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	4604      	mov	r4, r0
 8003618:	d14d      	bne.n	80036b6 <_malloc_r+0xde>
 800361a:	6834      	ldr	r4, [r6, #0]
 800361c:	4626      	mov	r6, r4
 800361e:	2e00      	cmp	r6, #0
 8003620:	d140      	bne.n	80036a4 <_malloc_r+0xcc>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	4631      	mov	r1, r6
 8003626:	4638      	mov	r0, r7
 8003628:	eb04 0803 	add.w	r8, r4, r3
 800362c:	f000 f878 	bl	8003720 <_sbrk_r>
 8003630:	4580      	cmp	r8, r0
 8003632:	d13a      	bne.n	80036aa <_malloc_r+0xd2>
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	3503      	adds	r5, #3
 8003638:	1a6d      	subs	r5, r5, r1
 800363a:	f025 0503 	bic.w	r5, r5, #3
 800363e:	3508      	adds	r5, #8
 8003640:	2d0c      	cmp	r5, #12
 8003642:	bf38      	it	cc
 8003644:	250c      	movcc	r5, #12
 8003646:	4638      	mov	r0, r7
 8003648:	4629      	mov	r1, r5
 800364a:	f7ff ffa5 	bl	8003598 <sbrk_aligned>
 800364e:	3001      	adds	r0, #1
 8003650:	d02b      	beq.n	80036aa <_malloc_r+0xd2>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	442b      	add	r3, r5
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	e00e      	b.n	8003678 <_malloc_r+0xa0>
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	1b52      	subs	r2, r2, r5
 800365e:	d41e      	bmi.n	800369e <_malloc_r+0xc6>
 8003660:	2a0b      	cmp	r2, #11
 8003662:	d916      	bls.n	8003692 <_malloc_r+0xba>
 8003664:	1961      	adds	r1, r4, r5
 8003666:	42a3      	cmp	r3, r4
 8003668:	6025      	str	r5, [r4, #0]
 800366a:	bf18      	it	ne
 800366c:	6059      	strne	r1, [r3, #4]
 800366e:	6863      	ldr	r3, [r4, #4]
 8003670:	bf08      	it	eq
 8003672:	6031      	streq	r1, [r6, #0]
 8003674:	5162      	str	r2, [r4, r5]
 8003676:	604b      	str	r3, [r1, #4]
 8003678:	4638      	mov	r0, r7
 800367a:	f104 060b 	add.w	r6, r4, #11
 800367e:	f000 f865 	bl	800374c <__malloc_unlock>
 8003682:	f026 0607 	bic.w	r6, r6, #7
 8003686:	1d23      	adds	r3, r4, #4
 8003688:	1af2      	subs	r2, r6, r3
 800368a:	d0b6      	beq.n	80035fa <_malloc_r+0x22>
 800368c:	1b9b      	subs	r3, r3, r6
 800368e:	50a3      	str	r3, [r4, r2]
 8003690:	e7b3      	b.n	80035fa <_malloc_r+0x22>
 8003692:	6862      	ldr	r2, [r4, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	bf0c      	ite	eq
 8003698:	6032      	streq	r2, [r6, #0]
 800369a:	605a      	strne	r2, [r3, #4]
 800369c:	e7ec      	b.n	8003678 <_malloc_r+0xa0>
 800369e:	4623      	mov	r3, r4
 80036a0:	6864      	ldr	r4, [r4, #4]
 80036a2:	e7b2      	b.n	800360a <_malloc_r+0x32>
 80036a4:	4634      	mov	r4, r6
 80036a6:	6876      	ldr	r6, [r6, #4]
 80036a8:	e7b9      	b.n	800361e <_malloc_r+0x46>
 80036aa:	230c      	movs	r3, #12
 80036ac:	4638      	mov	r0, r7
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	f000 f84c 	bl	800374c <__malloc_unlock>
 80036b4:	e7a1      	b.n	80035fa <_malloc_r+0x22>
 80036b6:	6025      	str	r5, [r4, #0]
 80036b8:	e7de      	b.n	8003678 <_malloc_r+0xa0>
 80036ba:	bf00      	nop
 80036bc:	200000c4 	.word	0x200000c4

080036c0 <_realloc_r>:
 80036c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c4:	4680      	mov	r8, r0
 80036c6:	4614      	mov	r4, r2
 80036c8:	460e      	mov	r6, r1
 80036ca:	b921      	cbnz	r1, 80036d6 <_realloc_r+0x16>
 80036cc:	4611      	mov	r1, r2
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d2:	f7ff bf81 	b.w	80035d8 <_malloc_r>
 80036d6:	b92a      	cbnz	r2, 80036e4 <_realloc_r+0x24>
 80036d8:	f7ff ff16 	bl	8003508 <_free_r>
 80036dc:	4625      	mov	r5, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036e4:	f000 f838 	bl	8003758 <_malloc_usable_size_r>
 80036e8:	4284      	cmp	r4, r0
 80036ea:	4607      	mov	r7, r0
 80036ec:	d802      	bhi.n	80036f4 <_realloc_r+0x34>
 80036ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036f2:	d812      	bhi.n	800371a <_realloc_r+0x5a>
 80036f4:	4621      	mov	r1, r4
 80036f6:	4640      	mov	r0, r8
 80036f8:	f7ff ff6e 	bl	80035d8 <_malloc_r>
 80036fc:	4605      	mov	r5, r0
 80036fe:	2800      	cmp	r0, #0
 8003700:	d0ed      	beq.n	80036de <_realloc_r+0x1e>
 8003702:	42bc      	cmp	r4, r7
 8003704:	4622      	mov	r2, r4
 8003706:	4631      	mov	r1, r6
 8003708:	bf28      	it	cs
 800370a:	463a      	movcs	r2, r7
 800370c:	f7ff fed4 	bl	80034b8 <memcpy>
 8003710:	4631      	mov	r1, r6
 8003712:	4640      	mov	r0, r8
 8003714:	f7ff fef8 	bl	8003508 <_free_r>
 8003718:	e7e1      	b.n	80036de <_realloc_r+0x1e>
 800371a:	4635      	mov	r5, r6
 800371c:	e7df      	b.n	80036de <_realloc_r+0x1e>
	...

08003720 <_sbrk_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	2300      	movs	r3, #0
 8003724:	4d05      	ldr	r5, [pc, #20]	; (800373c <_sbrk_r+0x1c>)
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f7fd febc 	bl	80014a8 <_sbrk>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_sbrk_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_sbrk_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200000cc 	.word	0x200000cc

08003740 <__malloc_lock>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__malloc_lock+0x8>)
 8003742:	f000 b811 	b.w	8003768 <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	200000d0 	.word	0x200000d0

0800374c <__malloc_unlock>:
 800374c:	4801      	ldr	r0, [pc, #4]	; (8003754 <__malloc_unlock+0x8>)
 800374e:	f000 b80c 	b.w	800376a <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	200000d0 	.word	0x200000d0

08003758 <_malloc_usable_size_r>:
 8003758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375c:	1f18      	subs	r0, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfbc      	itt	lt
 8003762:	580b      	ldrlt	r3, [r1, r0]
 8003764:	18c0      	addlt	r0, r0, r3
 8003766:	4770      	bx	lr

08003768 <__retarget_lock_acquire_recursive>:
 8003768:	4770      	bx	lr

0800376a <__retarget_lock_release_recursive>:
 800376a:	4770      	bx	lr

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
