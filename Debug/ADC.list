
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a40  08003a40  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a40  08003a40  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a40  08003a40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  08003ab8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003ab8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057ee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001763  00000000  00000000  00025887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00026ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  000275e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017685  00000000  00000000  00027b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007966  00000000  00000000  0003f18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085683  00000000  00000000  00046af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b68  00000000  00000000  000cc1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080039a8 	.word	0x080039a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080039a8 	.word	0x080039a8

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2uiz>:
 8000d10:	0042      	lsls	r2, r0, #1
 8000d12:	d20e      	bcs.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30b      	bcc.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d409      	bmi.n	8000d38 <__aeabi_f2uiz+0x28>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2uiz+0x32>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d102      	bne.n	8000d48 <__aeabi_f2uiz+0x38>
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <lcd_init>:

		return ch;
}
*/
void lcd_init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b90      	ldr	r3, [pc, #576]	; (8000f98 <lcd_init+0x248>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a8f      	ldr	r2, [pc, #572]	; (8000f98 <lcd_init+0x248>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <lcd_init+0x248>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b8a      	ldr	r3, [pc, #552]	; (8000f98 <lcd_init+0x248>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a89      	ldr	r2, [pc, #548]	; (8000f98 <lcd_init+0x248>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <lcd_init+0x248>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b84      	ldr	r3, [pc, #528]	; (8000f98 <lcd_init+0x248>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a83      	ldr	r2, [pc, #524]	; (8000f98 <lcd_init+0x248>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <lcd_init+0x248>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	= LCDRS_PIN;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDRS_PORT, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4879      	ldr	r0, [pc, #484]	; (8000f9c <lcd_init+0x24c>)
 8000db6:	f001 fa33 	bl	8002220 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCDE_PIN;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDE_PORT, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4872      	ldr	r0, [pc, #456]	; (8000f9c <lcd_init+0x24c>)
 8000dd2:	f001 fa25 	bl	8002220 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD4_PIN;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD4_PORT, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	486c      	ldr	r0, [pc, #432]	; (8000fa0 <lcd_init+0x250>)
 8000dee:	f001 fa17 	bl	8002220 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD5_PIN;
 8000df2:	2310      	movs	r3, #16
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD5_PORT, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <lcd_init+0x250>)
 8000e0a:	f001 fa09 	bl	8002220 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD6_PIN;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD6_PORT, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	485e      	ldr	r0, [pc, #376]	; (8000fa0 <lcd_init+0x250>)
 8000e26:	f001 f9fb 	bl	8002220 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD7_PIN;
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD7_PORT, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4857      	ldr	r0, [pc, #348]	; (8000fa0 <lcd_init+0x250>)
 8000e42:	f001 f9ed 	bl	8002220 <HAL_GPIO_Init>

	HAL_Delay(15);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 fd10 	bl	800186c <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2140      	movs	r1, #64	; 0x40
 8000e50:	4853      	ldr	r0, [pc, #332]	; (8000fa0 <lcd_init+0x250>)
 8000e52:	f001 fb69 	bl	8002528 <HAL_GPIO_WritePin>
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4851      	ldr	r0, [pc, #324]	; (8000fa0 <lcd_init+0x250>)
 8000e5c:	f001 fb64 	bl	8002528 <HAL_GPIO_WritePin>
 8000e60:	2200      	movs	r2, #0
 8000e62:	2110      	movs	r1, #16
 8000e64:	484e      	ldr	r0, [pc, #312]	; (8000fa0 <lcd_init+0x250>)
 8000e66:	f001 fb5f 	bl	8002528 <HAL_GPIO_WritePin>
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <lcd_init+0x250>)
 8000e70:	f001 fb5a 	bl	8002528 <HAL_GPIO_WritePin>
	LCDE_OFF;
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	4848      	ldr	r0, [pc, #288]	; (8000f9c <lcd_init+0x24c>)
 8000e7a:	f001 fb55 	bl	8002528 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	4846      	ldr	r0, [pc, #280]	; (8000f9c <lcd_init+0x24c>)
 8000e84:	f001 fb50 	bl	8002528 <HAL_GPIO_WritePin>
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4844      	ldr	r0, [pc, #272]	; (8000fa0 <lcd_init+0x250>)
 8000e8e:	f001 fb4b 	bl	8002528 <HAL_GPIO_WritePin>
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4842      	ldr	r0, [pc, #264]	; (8000fa0 <lcd_init+0x250>)
 8000e98:	f001 fb46 	bl	8002528 <HAL_GPIO_WritePin>
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <lcd_init+0x250>)
 8000ea2:	f001 fb41 	bl	8002528 <HAL_GPIO_WritePin>
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	483d      	ldr	r0, [pc, #244]	; (8000fa0 <lcd_init+0x250>)
 8000eac:	f001 fb3c 	bl	8002528 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4839      	ldr	r0, [pc, #228]	; (8000f9c <lcd_init+0x24c>)
 8000eb6:	f001 fb37 	bl	8002528 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <lcd_init+0x24c>)
 8000ec0:	f001 fb32 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f000 fcd1 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4833      	ldr	r0, [pc, #204]	; (8000f9c <lcd_init+0x24c>)
 8000ed0:	f001 fb2a 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f000 fcc9 	bl	800186c <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8000eda:	2200      	movs	r2, #0
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <lcd_init+0x250>)
 8000ee0:	f001 fb22 	bl	8002528 <HAL_GPIO_WritePin>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <lcd_init+0x250>)
 8000eea:	f001 fb1d 	bl	8002528 <HAL_GPIO_WritePin>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <lcd_init+0x250>)
 8000ef4:	f001 fb18 	bl	8002528 <HAL_GPIO_WritePin>
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2108      	movs	r1, #8
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <lcd_init+0x250>)
 8000efe:	f001 fb13 	bl	8002528 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <lcd_init+0x24c>)
 8000f08:	f001 fb0e 	bl	8002528 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4822      	ldr	r0, [pc, #136]	; (8000f9c <lcd_init+0x24c>)
 8000f12:	f001 fb09 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f000 fca8 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <lcd_init+0x24c>)
 8000f22:	f001 fb01 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fca0 	bl	800186c <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <lcd_init+0x250>)
 8000f32:	f001 faf9 	bl	8002528 <HAL_GPIO_WritePin>
 8000f36:	2200      	movs	r2, #0
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <lcd_init+0x250>)
 8000f3c:	f001 faf4 	bl	8002528 <HAL_GPIO_WritePin>
 8000f40:	2201      	movs	r2, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <lcd_init+0x250>)
 8000f46:	f001 faef 	bl	8002528 <HAL_GPIO_WritePin>
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <lcd_init+0x250>)
 8000f50:	f001 faea 	bl	8002528 <HAL_GPIO_WritePin>
	LCDE_ON;
 8000f54:	2201      	movs	r2, #1
 8000f56:	2110      	movs	r1, #16
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <lcd_init+0x24c>)
 8000f5a:	f001 fae5 	bl	8002528 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2120      	movs	r1, #32
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <lcd_init+0x24c>)
 8000f64:	f001 fae0 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fc7f 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <lcd_init+0x24c>)
 8000f74:	f001 fad8 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f000 fc77 	bl	800186c <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8000f7e:	2028      	movs	r0, #40	; 0x28
 8000f80:	f000 f8c2 	bl	8001108 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 8000f84:	200c      	movs	r0, #12
 8000f86:	f000 f8bf 	bl	8001108 <lcd_command>
	//-----Clear display
	lcd_clear();
 8000f8a:	f000 f9bf 	bl	800130c <lcd_clear>
}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4853      	ldr	r0, [pc, #332]	; (8001100 <lcd_putc+0x15c>)
 8000fb4:	f001 fab8 	bl	8002528 <HAL_GPIO_WritePin>

  if ( ch & 0x10 ) {
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <lcd_putc+0x2a>
		LCD4_ON;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	484f      	ldr	r0, [pc, #316]	; (8001104 <lcd_putc+0x160>)
 8000fc8:	f001 faae 	bl	8002528 <HAL_GPIO_WritePin>
 8000fcc:	e004      	b.n	8000fd8 <lcd_putc+0x34>
	} else {
		LCD4_OFF;
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	484c      	ldr	r0, [pc, #304]	; (8001104 <lcd_putc+0x160>)
 8000fd4:	f001 faa8 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x20 ) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <lcd_putc+0x4a>
		LCD5_ON;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4847      	ldr	r0, [pc, #284]	; (8001104 <lcd_putc+0x160>)
 8000fe8:	f001 fa9e 	bl	8002528 <HAL_GPIO_WritePin>
 8000fec:	e004      	b.n	8000ff8 <lcd_putc+0x54>
	} else {
    LCD5_OFF;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	4844      	ldr	r0, [pc, #272]	; (8001104 <lcd_putc+0x160>)
 8000ff4:	f001 fa98 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x40 ) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <lcd_putc+0x6a>
		LCD6_ON;
 8001002:	2201      	movs	r2, #1
 8001004:	2120      	movs	r1, #32
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <lcd_putc+0x160>)
 8001008:	f001 fa8e 	bl	8002528 <HAL_GPIO_WritePin>
 800100c:	e004      	b.n	8001018 <lcd_putc+0x74>
	} else {
		LCD6_OFF;
 800100e:	2200      	movs	r2, #0
 8001010:	2120      	movs	r1, #32
 8001012:	483c      	ldr	r0, [pc, #240]	; (8001104 <lcd_putc+0x160>)
 8001014:	f001 fa88 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x80 ) {
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da05      	bge.n	800102c <lcd_putc+0x88>
		LCD7_ON;
 8001020:	2201      	movs	r2, #1
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	4837      	ldr	r0, [pc, #220]	; (8001104 <lcd_putc+0x160>)
 8001026:	f001 fa7f 	bl	8002528 <HAL_GPIO_WritePin>
 800102a:	e004      	b.n	8001036 <lcd_putc+0x92>
	} else {
		LCD7_OFF;
 800102c:	2200      	movs	r2, #0
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	4834      	ldr	r0, [pc, #208]	; (8001104 <lcd_putc+0x160>)
 8001032:	f001 fa79 	bl	8002528 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001036:	2201      	movs	r2, #1
 8001038:	2110      	movs	r1, #16
 800103a:	4831      	ldr	r0, [pc, #196]	; (8001100 <lcd_putc+0x15c>)
 800103c:	f001 fa74 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fc13 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 8001046:	2200      	movs	r2, #0
 8001048:	2110      	movs	r1, #16
 800104a:	482d      	ldr	r0, [pc, #180]	; (8001100 <lcd_putc+0x15c>)
 800104c:	f001 fa6c 	bl	8002528 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 fc0b 	bl	800186c <HAL_Delay>

	if ( ch & 0x01 ) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <lcd_putc+0xc8>
		LCD4_ON;
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	4827      	ldr	r0, [pc, #156]	; (8001104 <lcd_putc+0x160>)
 8001066:	f001 fa5f 	bl	8002528 <HAL_GPIO_WritePin>
 800106a:	e004      	b.n	8001076 <lcd_putc+0xd2>
	} else {
		LCD4_OFF;
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <lcd_putc+0x160>)
 8001072:	f001 fa59 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x02 ) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <lcd_putc+0xe8>
		LCD5_ON;
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <lcd_putc+0x160>)
 8001086:	f001 fa4f 	bl	8002528 <HAL_GPIO_WritePin>
 800108a:	e004      	b.n	8001096 <lcd_putc+0xf2>
	} else {
    LCD5_OFF;
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <lcd_putc+0x160>)
 8001092:	f001 fa49 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x04 ) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <lcd_putc+0x108>
		LCD6_ON;
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <lcd_putc+0x160>)
 80010a6:	f001 fa3f 	bl	8002528 <HAL_GPIO_WritePin>
 80010aa:	e004      	b.n	80010b6 <lcd_putc+0x112>
	} else {
    LCD6_OFF;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <lcd_putc+0x160>)
 80010b2:	f001 fa39 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x08 ) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <lcd_putc+0x128>
		LCD7_ON;
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <lcd_putc+0x160>)
 80010c6:	f001 fa2f 	bl	8002528 <HAL_GPIO_WritePin>
 80010ca:	e004      	b.n	80010d6 <lcd_putc+0x132>
	} else {
    LCD7_OFF;
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <lcd_putc+0x160>)
 80010d2:	f001 fa29 	bl	8002528 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 80010d6:	2201      	movs	r2, #1
 80010d8:	2110      	movs	r1, #16
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <lcd_putc+0x15c>)
 80010dc:	f001 fa24 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fbc3 	bl	800186c <HAL_Delay>
  LCDE_OFF;
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <lcd_putc+0x15c>)
 80010ec:	f001 fa1c 	bl	8002528 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fbbb 	bl	800186c <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800
 8001104:	40010c00 	.word	0x40010c00

08001108 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4853      	ldr	r0, [pc, #332]	; (8001264 <lcd_command+0x15c>)
 8001118:	f001 fa06 	bl	8002528 <HAL_GPIO_WritePin>

	if ( cmd & 0x10 ) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <lcd_command+0x2a>
		LCD4_ON;
 8001126:	2201      	movs	r2, #1
 8001128:	2108      	movs	r1, #8
 800112a:	484f      	ldr	r0, [pc, #316]	; (8001268 <lcd_command+0x160>)
 800112c:	f001 f9fc 	bl	8002528 <HAL_GPIO_WritePin>
 8001130:	e004      	b.n	800113c <lcd_command+0x34>
	} else {
		LCD4_OFF;
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	484c      	ldr	r0, [pc, #304]	; (8001268 <lcd_command+0x160>)
 8001138:	f001 f9f6 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x20 ) {
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <lcd_command+0x4a>
		LCD5_ON;
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4847      	ldr	r0, [pc, #284]	; (8001268 <lcd_command+0x160>)
 800114c:	f001 f9ec 	bl	8002528 <HAL_GPIO_WritePin>
 8001150:	e004      	b.n	800115c <lcd_command+0x54>
	} else {
		LCD5_OFF;
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	4844      	ldr	r0, [pc, #272]	; (8001268 <lcd_command+0x160>)
 8001158:	f001 f9e6 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x40 ) {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <lcd_command+0x6a>
		LCD6_ON;
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	483f      	ldr	r0, [pc, #252]	; (8001268 <lcd_command+0x160>)
 800116c:	f001 f9dc 	bl	8002528 <HAL_GPIO_WritePin>
 8001170:	e004      	b.n	800117c <lcd_command+0x74>
	} else {
		LCD6_OFF;
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	483c      	ldr	r0, [pc, #240]	; (8001268 <lcd_command+0x160>)
 8001178:	f001 f9d6 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x80 ) {
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da05      	bge.n	8001190 <lcd_command+0x88>
		LCD7_ON;
 8001184:	2201      	movs	r2, #1
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	4837      	ldr	r0, [pc, #220]	; (8001268 <lcd_command+0x160>)
 800118a:	f001 f9cd 	bl	8002528 <HAL_GPIO_WritePin>
 800118e:	e004      	b.n	800119a <lcd_command+0x92>
	} else {
		LCD7_OFF;
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	4834      	ldr	r0, [pc, #208]	; (8001268 <lcd_command+0x160>)
 8001196:	f001 f9c7 	bl	8002528 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 800119a:	2201      	movs	r2, #1
 800119c:	2110      	movs	r1, #16
 800119e:	4831      	ldr	r0, [pc, #196]	; (8001264 <lcd_command+0x15c>)
 80011a0:	f001 f9c2 	bl	8002528 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 fb61 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	482d      	ldr	r0, [pc, #180]	; (8001264 <lcd_command+0x15c>)
 80011b0:	f001 f9ba 	bl	8002528 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f000 fb59 	bl	800186c <HAL_Delay>

	if ( cmd & 0x01 ) {
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <lcd_command+0xc8>
		LCD4_ON;
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <lcd_command+0x160>)
 80011ca:	f001 f9ad 	bl	8002528 <HAL_GPIO_WritePin>
 80011ce:	e004      	b.n	80011da <lcd_command+0xd2>
	} else {
		LCD4_OFF;
 80011d0:	2200      	movs	r2, #0
 80011d2:	2108      	movs	r1, #8
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <lcd_command+0x160>)
 80011d6:	f001 f9a7 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x02 ) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <lcd_command+0xe8>
		LCD5_ON;
 80011e4:	2201      	movs	r2, #1
 80011e6:	2110      	movs	r1, #16
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <lcd_command+0x160>)
 80011ea:	f001 f99d 	bl	8002528 <HAL_GPIO_WritePin>
 80011ee:	e004      	b.n	80011fa <lcd_command+0xf2>
	} else {
		LCD5_OFF;
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <lcd_command+0x160>)
 80011f6:	f001 f997 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x04 ) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <lcd_command+0x108>
		LCD6_ON;
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	4817      	ldr	r0, [pc, #92]	; (8001268 <lcd_command+0x160>)
 800120a:	f001 f98d 	bl	8002528 <HAL_GPIO_WritePin>
 800120e:	e004      	b.n	800121a <lcd_command+0x112>
	} else {
		LCD6_OFF;
 8001210:	2200      	movs	r2, #0
 8001212:	2120      	movs	r1, #32
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <lcd_command+0x160>)
 8001216:	f001 f987 	bl	8002528 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x08 ) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <lcd_command+0x128>
		LCD7_ON;
 8001224:	2201      	movs	r2, #1
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	480f      	ldr	r0, [pc, #60]	; (8001268 <lcd_command+0x160>)
 800122a:	f001 f97d 	bl	8002528 <HAL_GPIO_WritePin>
 800122e:	e004      	b.n	800123a <lcd_command+0x132>
	} else {
		LCD7_OFF;
 8001230:	2200      	movs	r2, #0
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <lcd_command+0x160>)
 8001236:	f001 f977 	bl	8002528 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 800123a:	2201      	movs	r2, #1
 800123c:	2110      	movs	r1, #16
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <lcd_command+0x15c>)
 8001240:	f001 f972 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fb11 	bl	800186c <HAL_Delay>
	LCDE_OFF;
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <lcd_command+0x15c>)
 8001250:	f001 f96a 	bl	8002528 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 fb09 	bl	800186c <HAL_Delay>

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40010800 	.word	0x40010800
 8001268:	40010c00 	.word	0x40010c00

0800126c <lcd_puts>:

void lcd_puts(unsigned char* data, unsigned char nBytes){	//Outputs string to LCD
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	register unsigned char i=0;

	for(i=0; i<nBytes; i++){	// print data
 8001278:	2400      	movs	r4, #0
 800127a:	e009      	b.n	8001290 <lcd_puts+0x24>
		lcd_putc(data[i]);
 800127c:	4622      	mov	r2, r4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe8d 	bl	8000fa4 <lcd_putc>
	for(i=0; i<nBytes; i++){	// print data
 800128a:	4623      	mov	r3, r4
 800128c:	3301      	adds	r3, #1
 800128e:	b2dc      	uxtb	r4, r3
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	42a3      	cmp	r3, r4
 8001294:	d8f2      	bhi.n	800127c <lcd_puts+0x10>
	}
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d81b      	bhi.n	80012f0 <lcd_gotoxy+0x50>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <lcd_gotoxy+0x20>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012d9 	.word	0x080012d9
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	080012e9 	.word	0x080012e9
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	b2dc      	uxtb	r4, r3
 80012d6:	e00f      	b.n	80012f8 <lcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	333f      	adds	r3, #63	; 0x3f
 80012dc:	b2dc      	uxtb	r4, r3
 80012de:	e00b      	b.n	80012f8 <lcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3313      	adds	r3, #19
 80012e4:	b2dc      	uxtb	r4, r3
 80012e6:	e007      	b.n	80012f8 <lcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3353      	adds	r3, #83	; 0x53
 80012ec:	b2dc      	uxtb	r4, r3
 80012ee:	e003      	b.n	80012f8 <lcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b2dc      	uxtb	r4, r3
 80012f6:	bf00      	nop
	}
	lcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 80012f8:	f064 037f 	orn	r3, r4, #127	; 0x7f
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff02 	bl	8001108 <lcd_command>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fef9 	bl	8001108 <lcd_command>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	0000      	movs	r0, r0
 800131c:	0000      	movs	r0, r0
	...

08001320 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001326:	f000 fa3f 	bl	80017a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800132a:	f000 f883 	bl	8001434 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800132e:	f000 f91b 	bl	8001568 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001332:	f000 f8db 	bl	80014ec <MX_ADC1_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_init();
 8001336:	f7ff fd0b 	bl	8000d50 <lcd_init>

	uint16_t adc;

	HAL_ADCEx_Calibration_Start(&hadc1);
 800133a:	4839      	ldr	r0, [pc, #228]	; (8001420 <main+0x100>)
 800133c:	f000 fde0 	bl	8001f00 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001340:	4837      	ldr	r0, [pc, #220]	; (8001420 <main+0x100>)
 8001342:	f000 fb8f 	bl	8001a64 <HAL_ADC_Start>

	while (1) {
		adc = HAL_ADC_GetValue(&hadc1);
 8001346:	4836      	ldr	r0, [pc, #216]	; (8001420 <main+0x100>)
 8001348:	f000 fc3a 	bl	8001bc0 <HAL_ADC_GetValue>
 800134c:	4603      	mov	r3, r0
 800134e:	83fb      	strh	r3, [r7, #30]
		float voltage = adc * 3.3 / 4095;
 8001350:	8bfb      	ldrh	r3, [r7, #30]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f902 	bl	800055c <__aeabi_i2d>
 8001358:	a32d      	add	r3, pc, #180	; (adr r3, 8001410 <main+0xf0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f967 	bl	8000630 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a32b      	add	r3, pc, #172	; (adr r3, 8001418 <main+0xf8>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fa88 	bl	8000884 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fb6a 	bl	8000a54 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]
		float temp_voltage;
		uint32_t p_entera, p_frac;
		char str_entera[1];
		char str_frac[3];

		p_entera = (uint32_t) voltage;
 8001384:	69b8      	ldr	r0, [r7, #24]
 8001386:	f7ff fcc3 	bl	8000d10 <__aeabi_f2uiz>
 800138a:	4603      	mov	r3, r0
 800138c:	617b      	str	r3, [r7, #20]
		temp_voltage = (voltage - p_entera) * 1000;
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff fc66 	bl	8000c60 <__aeabi_ui2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	69b8      	ldr	r0, [r7, #24]
 800139a:	f7ff fbaf 	bl	8000afc <__aeabi_fsub>
 800139e:	4603      	mov	r3, r0
 80013a0:	4920      	ldr	r1, [pc, #128]	; (8001424 <main+0x104>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe fed4 	bl	8000150 <__aeabi_fmul>
 80013a8:	4603      	mov	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]
		p_frac = (uint32_t) temp_voltage;
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff fcaf 	bl	8000d10 <__aeabi_f2uiz>
 80013b2:	4603      	mov	r3, r0
 80013b4:	60fb      	str	r3, [r7, #12]
		sprintf(str_entera, "%1d", p_entera);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	491a      	ldr	r1, [pc, #104]	; (8001428 <main+0x108>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fe78 	bl	80030b4 <siprintf>
		sprintf(str_frac, "%3d", p_frac);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4918      	ldr	r1, [pc, #96]	; (800142c <main+0x10c>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fe72 	bl	80030b4 <siprintf>

		lcd_clear();
 80013d0:	f7ff ff9c 	bl	800130c <lcd_clear>
		lcd_puts("Voltage:", 8);
 80013d4:	2108      	movs	r1, #8
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <main+0x110>)
 80013d8:	f7ff ff48 	bl	800126c <lcd_puts>

		lcd_gotoxy(1, 2);
 80013dc:	2102      	movs	r1, #2
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff ff5e 	bl	80012a0 <lcd_gotoxy>
		lcd_puts(str_entera, 1);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff3e 	bl	800126c <lcd_puts>
		lcd_putc('.');
 80013f0:	202e      	movs	r0, #46	; 0x2e
 80013f2:	f7ff fdd7 	bl	8000fa4 <lcd_putc>
		lcd_puts(str_frac, 3);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2103      	movs	r1, #3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff36 	bl	800126c <lcd_puts>

		HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f000 fa32 	bl	800186c <HAL_Delay>
	while (1) {
 8001408:	e79d      	b.n	8001346 <main+0x26>
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	66666666 	.word	0x66666666
 8001414:	400a6666 	.word	0x400a6666
 8001418:	00000000 	.word	0x00000000
 800141c:	40affe00 	.word	0x40affe00
 8001420:	2000008c 	.word	0x2000008c
 8001424:	447a0000 	.word	0x447a0000
 8001428:	080039c0 	.word	0x080039c0
 800142c:	080039c4 	.word	0x080039c4
 8001430:	080039c8 	.word	0x080039c8

08001434 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	; 0x50
 8001438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800143a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fe2e 	bl	80030a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001476:	2302      	movs	r3, #2
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001484:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f864 	bl	8002558 <HAL_RCC_OscConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x66>
		Error_Handler();
 8001496:	f000 f889 	bl	80015ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014aa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fad0 	bl	8002a5c <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x92>
		Error_Handler();
 80014c2:	f000 f873 	bl	80015ac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c6:	2302      	movs	r3, #2
 80014c8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fc46 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xae>
		Error_Handler();
 80014de:	f000 f865 	bl	80015ac <Error_Handler>
	}
}
 80014e2:	bf00      	nop
 80014e4:	3750      	adds	r7, #80	; 0x50
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_ADC1_Init+0x74>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <MX_ADC1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_ADC1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_ADC1_Init+0x74>)
 800150a:	2201      	movs	r2, #1
 800150c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_ADC1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_ADC1_Init+0x74>)
 8001516:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800151a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_ADC1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_ADC1_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_ADC1_Init+0x74>)
 800152a:	f000 f9c3 	bl	80018b4 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001534:	f000 f83a 	bl	80015ac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001538:	2303      	movs	r3, #3
 800153a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_ADC1_Init+0x74>)
 800154a:	f000 fb45 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001554:	f000 f82a 	bl	80015ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000008c 	.word	0x2000008c
 8001564:	40012400 	.word	0x40012400

08001568 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_GPIO_Init+0x40>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <MX_GPIO_Init+0x40>)
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_GPIO_Init+0x40>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_GPIO_Init+0x40>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <MX_GPIO_Init+0x40>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <MX_GPIO_Init+0x40>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40021000 	.word	0x40021000

080015ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_MspInit+0x5c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x5c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_MspInit+0x60>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_MspInit+0x60>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000

0800161c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_ADC_MspInit+0x6c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d121      	bne.n	8001680 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_ADC_MspInit+0x70>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_ADC_MspInit+0x70>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_ADC_MspInit+0x70>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_ADC_MspInit+0x70>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800166c:	2308      	movs	r3, #8
 800166e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	2303      	movs	r3, #3
 8001672:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_ADC_MspInit+0x74>)
 800167c:	f000 fdd0 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40012400 	.word	0x40012400
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 f8ab 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f001 fc9c 	bl	8003050 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20005000 	.word	0x20005000
 8001744:	00000400 	.word	0x00000400
 8001748:	200000bc 	.word	0x200000bc
 800174c:	200000d8 	.word	0x200000d8

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001782:	f7ff ffe5 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f001 fc69 	bl	800305c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff fdc9 	bl	8001320 <main>
  bx lr
 800178e:	4770      	bx	lr
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001798:	08003a48 	.word	0x08003a48
  ldr r2, =_sbss
 800179c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017a0:	200000d4 	.word	0x200000d4

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x28>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 fcfd 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fef8 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd07 	bl	8002206 <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001810:	f000 fcdd 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_IncTick+0x20>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000008 	.word	0x20000008
 8001854:	200000c0 	.word	0x200000c0

08001858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	200000c0 	.word	0x200000c0

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff0 	bl	8001858 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffe0 	bl	8001858 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0be      	b.n	8001a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fe92 	bl	800161c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fabf 	bl	8001e7c <ADC_ConversionStop_Disable>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8099 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8095 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001920:	f023 0302 	bic.w	r3, r3, #2
 8001924:	f043 0202 	orr.w	r2, r3, #2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7b1b      	ldrb	r3, [r3, #12]
 800193a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800193c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4313      	orrs	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0xa2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_ADC_Init+0xa8>
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	e000      	b.n	800195e <HAL_ADC_Init+0xaa>
 800195c:	2300      	movs	r3, #0
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b1b      	ldrb	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	3b01      	subs	r3, #1
 800197a:	035a      	lsls	r2, r3, #13
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_ADC_Init+0x1a8>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d0:	d003      	beq.n	80019da <HAL_ADC_Init+0x126>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_ADC_Init+0x1ac>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1e:	e018      	b.n	8001a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f023 0312 	bic.w	r3, r3, #18
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a40:	e007      	b.n	8001a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a60:	ff1f0efe 	.word	0xff1f0efe

08001a64 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Start+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e098      	b.n	8001bb0 <HAL_ADC_Start+0x14c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f99e 	bl	8001dc8 <ADC_Enable>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8087 	bne.w	8001ba6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a41      	ldr	r2, [pc, #260]	; (8001bb8 <HAL_ADC_Start+0x154>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_Start+0x5e>
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_ADC_Start+0x158>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d026      	beq.n	8001b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aec:	e01d      	b.n	8001b2a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <HAL_ADC_Start+0x158>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Start+0xaa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <HAL_ADC_Start+0x154>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_ADC_Start+0xc6>
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_ADC_Start+0x158>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f023 0206 	bic.w	r2, r3, #6
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b42:	e002      	b.n	8001b4a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0202 	mvn.w	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b6a:	d113      	bne.n	8001b94 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_ADC_Start+0x154>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d105      	bne.n	8001b82 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_ADC_Start+0x158>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d108      	bne.n	8001b94 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e00c      	b.n	8001bae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	e003      	b.n	8001bae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40012800 	.word	0x40012800
 8001bbc:	40012400 	.word	0x40012400

08001bc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x20>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e0dc      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x1da>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d81c      	bhi.n	8001c42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b05      	subs	r3, #5
 8001c1a:	221f      	movs	r2, #31
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b05      	subs	r3, #5
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c40:	e03c      	b.n	8001cbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d81c      	bhi.n	8001c84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b23      	subs	r3, #35	; 0x23
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4019      	ands	r1, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b23      	subs	r3, #35	; 0x23
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
 8001c82:	e01b      	b.n	8001cbc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3b41      	subs	r3, #65	; 0x41
 8001c96:	221f      	movs	r2, #31
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b41      	subs	r3, #65	; 0x41
 8001cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	d91c      	bls.n	8001cfe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68d9      	ldr	r1, [r3, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b1e      	subs	r3, #30
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4019      	ands	r1, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6898      	ldr	r0, [r3, #8]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	3b1e      	subs	r3, #30
 8001cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e019      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6919      	ldr	r1, [r3, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2207      	movs	r2, #7
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4019      	ands	r1, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6898      	ldr	r0, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d003      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d3e:	2b11      	cmp	r3, #17
 8001d40:	d132      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_ADC_ConfigChannel+0x1e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d125      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d126      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d11a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9a      	lsrs	r2, r3, #18
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x1b2>
 8001d96:	e007      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40012400 	.word	0x40012400
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	431bde83 	.word	0x431bde83

08001dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d040      	beq.n	8001e68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <ADC_Enable+0xac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <ADC_Enable+0xb0>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e04:	e002      	b.n	8001e0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f9      	bne.n	8001e06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e12:	f7ff fd21 	bl	8001858 <HAL_GetTick>
 8001e16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e18:	e01f      	b.n	8001e5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e1a:	f7ff fd1d 	bl	8001858 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d918      	bls.n	8001e5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d011      	beq.n	8001e5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d1d8      	bne.n	8001e1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	431bde83 	.word	0x431bde83

08001e7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d12e      	bne.n	8001ef4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ea6:	f7ff fcd7 	bl	8001858 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eac:	e01b      	b.n	8001ee6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eae:	f7ff fcd3 	bl	8001858 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d914      	bls.n	8001ee6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10d      	bne.n	8001ee6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f043 0210 	orr.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e007      	b.n	8001ef6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d0dc      	beq.n	8001eae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADCEx_Calibration_Start+0x1e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e095      	b.n	800204a <HAL_ADCEx_Calibration_Start+0x14a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa8 	bl	8001e7c <ADC_ConversionStop_Disable>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8084 	bne.w	8002040 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f40:	f023 0302 	bic.w	r3, r3, #2
 8001f44:	f043 0202 	orr.w	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f4c:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_ADCEx_Calibration_Start+0x154>)
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	2002      	movs	r0, #2
 8001f52:	f000 ffbd 	bl	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f56:	4603      	mov	r3, r0
 8001f58:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f5c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f5e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ff2a 	bl	8001dc8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f84:	f7ff fc68 	bl	8001858 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f8a:	e01b      	b.n	8001fc4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f8c:	f7ff fc64 	bl	8001858 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d914      	bls.n	8001fc4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f023 0312 	bic.w	r3, r3, #18
 8001fb0:	f043 0210 	orr.w	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e042      	b.n	800204a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1dc      	bne.n	8001f8c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0204 	orr.w	r2, r2, #4
 8001fe0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fe2:	f7ff fc39 	bl	8001858 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fe8:	e01b      	b.n	8002022 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fea:	f7ff fc35 	bl	8001858 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b0a      	cmp	r3, #10
 8001ff6:	d914      	bls.n	8002022 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f023 0312 	bic.w	r3, r3, #18
 800200e:	f043 0210 	orr.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e013      	b.n	800204a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1dc      	bne.n	8001fea <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	f023 0303 	bic.w	r3, r3, #3
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002048:	7dfb      	ldrb	r3, [r7, #23]
}
 800204a:	4618      	mov	r0, r3
 800204c:	371c      	adds	r7, #28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	f7ff ff90 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff49 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff5e 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff90 	bl	8002110 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5f 	bl	80020bc <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffb0 	bl	8002174 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002232:	e169      	b.n	8002508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002234:	2201      	movs	r2, #1
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8158 	bne.w	8002502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a9a      	ldr	r2, [pc, #616]	; (80024c0 <HAL_GPIO_Init+0x2a0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d05e      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 800225c:	4a98      	ldr	r2, [pc, #608]	; (80024c0 <HAL_GPIO_Init+0x2a0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d875      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002262:	4a98      	ldr	r2, [pc, #608]	; (80024c4 <HAL_GPIO_Init+0x2a4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d058      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002268:	4a96      	ldr	r2, [pc, #600]	; (80024c4 <HAL_GPIO_Init+0x2a4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d86f      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800226e:	4a96      	ldr	r2, [pc, #600]	; (80024c8 <HAL_GPIO_Init+0x2a8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d052      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002274:	4a94      	ldr	r2, [pc, #592]	; (80024c8 <HAL_GPIO_Init+0x2a8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d869      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800227a:	4a94      	ldr	r2, [pc, #592]	; (80024cc <HAL_GPIO_Init+0x2ac>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04c      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 8002280:	4a92      	ldr	r2, [pc, #584]	; (80024cc <HAL_GPIO_Init+0x2ac>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d863      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002286:	4a92      	ldr	r2, [pc, #584]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d046      	beq.n	800231a <HAL_GPIO_Init+0xfa>
 800228c:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_GPIO_Init+0x2b0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d85d      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 8002292:	2b12      	cmp	r3, #18
 8002294:	d82a      	bhi.n	80022ec <HAL_GPIO_Init+0xcc>
 8002296:	2b12      	cmp	r3, #18
 8002298:	d859      	bhi.n	800234e <HAL_GPIO_Init+0x12e>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <HAL_GPIO_Init+0x80>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	080022f5 	.word	0x080022f5
 80022a8:	08002307 	.word	0x08002307
 80022ac:	08002349 	.word	0x08002349
 80022b0:	0800234f 	.word	0x0800234f
 80022b4:	0800234f 	.word	0x0800234f
 80022b8:	0800234f 	.word	0x0800234f
 80022bc:	0800234f 	.word	0x0800234f
 80022c0:	0800234f 	.word	0x0800234f
 80022c4:	0800234f 	.word	0x0800234f
 80022c8:	0800234f 	.word	0x0800234f
 80022cc:	0800234f 	.word	0x0800234f
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	0800234f 	.word	0x0800234f
 80022d8:	0800234f 	.word	0x0800234f
 80022dc:	0800234f 	.word	0x0800234f
 80022e0:	0800234f 	.word	0x0800234f
 80022e4:	080022fd 	.word	0x080022fd
 80022e8:	08002311 	.word	0x08002311
 80022ec:	4a79      	ldr	r2, [pc, #484]	; (80024d4 <HAL_GPIO_Init+0x2b4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022f2:	e02c      	b.n	800234e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	623b      	str	r3, [r7, #32]
          break;
 80022fa:	e029      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	3304      	adds	r3, #4
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e024      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	3308      	adds	r3, #8
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e01f      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	330c      	adds	r3, #12
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	e01a      	b.n	8002350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d102      	bne.n	8002328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002322:	2304      	movs	r3, #4
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e013      	b.n	8002350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002330:	2308      	movs	r3, #8
 8002332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	611a      	str	r2, [r3, #16]
          break;
 800233a:	e009      	b.n	8002350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800233c:	2308      	movs	r3, #8
 800233e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	615a      	str	r2, [r3, #20]
          break;
 8002346:	e003      	b.n	8002350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
          break;
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x130>
          break;
 800234e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d801      	bhi.n	800235a <HAL_GPIO_Init+0x13a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	e001      	b.n	800235e <HAL_GPIO_Init+0x13e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2bff      	cmp	r3, #255	; 0xff
 8002364:	d802      	bhi.n	800236c <HAL_GPIO_Init+0x14c>
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x152>
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	3b08      	subs	r3, #8
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	210f      	movs	r1, #15
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80b1 	beq.w	8002502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_GPIO_Init+0x2b8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x2b8>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_GPIO_Init+0x2b8>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023b8:	4a48      	ldr	r2, [pc, #288]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a40      	ldr	r2, [pc, #256]	; (80024e0 <HAL_GPIO_Init+0x2c0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_GPIO_Init+0x1ec>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_GPIO_Init+0x2c4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00d      	beq.n	8002408 <HAL_GPIO_Init+0x1e8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <HAL_GPIO_Init+0x2c8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0x1e4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3d      	ldr	r2, [pc, #244]	; (80024ec <HAL_GPIO_Init+0x2cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_GPIO_Init+0x1e0>
 80023fc:	2303      	movs	r3, #3
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1ee>
 8002400:	2304      	movs	r3, #4
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1ee>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1ee>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1ee>
 800240c:	2300      	movs	r3, #0
 800240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800241e:	492f      	ldr	r1, [pc, #188]	; (80024dc <HAL_GPIO_Init+0x2bc>)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	492c      	ldr	r1, [pc, #176]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002446:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	4928      	ldr	r1, [pc, #160]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002450:	4013      	ands	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4922      	ldr	r1, [pc, #136]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	491e      	ldr	r1, [pc, #120]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4918      	ldr	r1, [pc, #96]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	4914      	ldr	r1, [pc, #80]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d021      	beq.n	80024f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
 80024bc:	e021      	b.n	8002502 <HAL_GPIO_Init+0x2e2>
 80024be:	bf00      	nop
 80024c0:	10320000 	.word	0x10320000
 80024c4:	10310000 	.word	0x10310000
 80024c8:	10220000 	.word	0x10220000
 80024cc:	10210000 	.word	0x10210000
 80024d0:	10120000 	.word	0x10120000
 80024d4:	10110000 	.word	0x10110000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	40010c00 	.word	0x40010c00
 80024e8:	40011000 	.word	0x40011000
 80024ec:	40011400 	.word	0x40011400
 80024f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_GPIO_Init+0x304>)
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4909      	ldr	r1, [pc, #36]	; (8002524 <HAL_GPIO_Init+0x304>)
 80024fe:	4013      	ands	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	f47f ae8e 	bne.w	8002234 <HAL_GPIO_Init+0x14>
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	372c      	adds	r7, #44	; 0x2c
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e272      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00c      	beq.n	800259e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d112      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d06c      	beq.n	8002684 <HAL_RCC_OscConfig+0x12c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d168      	bne.n	8002684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e24c      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x76>
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e02e      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0xbc>
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff f910 	bl	8001858 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff f90c 	bl	8001858 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e200      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0xe4>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff f8fc 	bl	8001858 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f8f8 	bl	8001858 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1ec      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x10c>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d063      	beq.n	800275a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1c0      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	e03a      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7ff f8b1 	bl	8001858 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff f8ad 	bl	8001858 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1a1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f890 	bl	8001858 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7ff f88c 	bl	8001858 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e180      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03a      	beq.n	80027dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7ff f870 	bl	8001858 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7ff f86c 	bl	8001858 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e160      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f000 fac4 	bl	8002d28 <RCC_Delay>
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7ff f856 	bl	8001858 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff f852 	bl	8001858 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d908      	bls.n	80027d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e146      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	42420000 	.word	0x42420000
 80027cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e9      	bne.n	80027b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a6 	beq.w	8002936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a87      	ldr	r2, [pc, #540]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b7f      	ldr	r3, [pc, #508]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7e      	ldr	r2, [pc, #504]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7ff f813 	bl	8001858 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7ff f80f 	bl	8001858 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e103      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x312>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e02d      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x334>
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a69      	ldr	r2, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x356>
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a5a      	ldr	r2, [pc, #360]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe ffc3 	bl	8001858 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe ffbf 	bl	8001858 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0b1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x37e>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe ffad 	bl	8001858 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe ffa9 	bl	8001858 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e09b      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8087 	beq.w	8002a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d061      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d146      	bne.n	80029e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe ff7d 	bl	8001858 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe ff79 	bl	8001858 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e06d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4921      	ldr	r1, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	430b      	orrs	r3, r1
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe ff4d 	bl	8001858 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe ff49 	bl	8001858 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46a>
 80029e0:	e035      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe ff36 	bl	8001858 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe ff32 	bl	8001858 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e026      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x498>
 8002a0e:	e01e      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e019      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x500>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d0      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e073      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4936      	ldr	r1, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fe84 	bl	8001858 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fe80 	bl	8001858 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e053      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d210      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 0207 	bic.w	r2, r3, #7
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fde2 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	080039f4 	.word	0x080039f4
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b490      	push	{r4, r7}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xac>)
 8002c38:	1d3c      	adds	r4, r7, #4
 8002c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c40:	f240 2301 	movw	r3, #513	; 0x201
 8002c44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d002      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x46>
 8002c6e:	e02b      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c72:	623b      	str	r3, [r7, #32]
      break;
 8002c74:	e02b      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	0c9b      	lsrs	r3, r3, #18
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3328      	adds	r3, #40	; 0x28
 8002c80:	443b      	add	r3, r7
 8002c82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c86:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	0c5b      	lsrs	r3, r3, #17
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	3328      	adds	r3, #40	; 0x28
 8002c9e:	443b      	add	r3, r7
 8002ca0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ca4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e004      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	623b      	str	r3, [r7, #32]
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cca:	623b      	str	r3, [r7, #32]
      break;
 8002ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc90      	pop	{r4, r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	080039d4 	.word	0x080039d4
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	007a1200 	.word	0x007a1200
 8002ce8:	003d0900 	.word	0x003d0900

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000000 	.word	0x20000000

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff fff2 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0adb      	lsrs	r3, r3, #11
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08003a04 	.word	0x08003a04

08002d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <RCC_Delay+0x34>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <RCC_Delay+0x38>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d44:	bf00      	nop
  }
  while (Delay --);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	60fa      	str	r2, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f9      	bne.n	8002d44 <RCC_Delay+0x1c>
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	61d3      	str	r3, [r2, #28]
 8002d9c:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d118      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db8:	4b43      	ldr	r3, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fd48 	bl	8001858 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	e008      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fd44 	bl	8001858 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e06d      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d02e      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d027      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e12:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e1e:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d014      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fd13 	bl	8001858 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fd0f 	bl	8001858 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e036      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4917      	ldr	r1, [pc, #92]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42420440 	.word	0x42420440

08002ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08d      	sub	sp, #52	; 0x34
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002eda:	f107 040c 	add.w	r4, r7, #12
 8002ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee4:	f240 2301 	movw	r3, #513	; 0x201
 8002ee8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	f200 808e 	bhi.w	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d049      	beq.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d079      	beq.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f18:	e086      	b.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f20:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d07f      	beq.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	3330      	adds	r3, #48	; 0x30
 8002f36:	443b      	add	r3, r7
 8002f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f3c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f48:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c5b      	lsrs	r3, r3, #17
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	3330      	adds	r3, #48	; 0x30
 8002f54:	443b      	add	r3, r7
 8002f56:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f66:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f76:	e004      	b.n	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f82:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8e:	d102      	bne.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f94:	e04a      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4a2c      	ldr	r2, [pc, #176]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002fa4:	e042      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb6:	d108      	bne.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc8:	e01f      	b.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d109      	bne.n	8002fea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002fe2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe8:	e00f      	b.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003002:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003008:	e012      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800300a:	e011      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800300c:	f7ff fe78 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0b9b      	lsrs	r3, r3, #14
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003026:	e004      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003028:	bf00      	nop
 800302a:	e002      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003030:	bf00      	nop
    }
  }
  return (frequency);
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003034:	4618      	mov	r0, r3
 8003036:	3734      	adds	r7, #52	; 0x34
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	080039e4 	.word	0x080039e4
 8003040:	40021000 	.word	0x40021000
 8003044:	007a1200 	.word	0x007a1200
 8003048:	003d0900 	.word	0x003d0900
 800304c:	aaaaaaab 	.word	0xaaaaaaab

08003050 <__errno>:
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <__errno+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <__libc_init_array>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	2600      	movs	r6, #0
 8003060:	4d0c      	ldr	r5, [pc, #48]	; (8003094 <__libc_init_array+0x38>)
 8003062:	4c0d      	ldr	r4, [pc, #52]	; (8003098 <__libc_init_array+0x3c>)
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	42a6      	cmp	r6, r4
 800306a:	d109      	bne.n	8003080 <__libc_init_array+0x24>
 800306c:	f000 fc9c 	bl	80039a8 <_init>
 8003070:	2600      	movs	r6, #0
 8003072:	4d0a      	ldr	r5, [pc, #40]	; (800309c <__libc_init_array+0x40>)
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <__libc_init_array+0x44>)
 8003076:	1b64      	subs	r4, r4, r5
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	42a6      	cmp	r6, r4
 800307c:	d105      	bne.n	800308a <__libc_init_array+0x2e>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	f855 3b04 	ldr.w	r3, [r5], #4
 8003084:	4798      	blx	r3
 8003086:	3601      	adds	r6, #1
 8003088:	e7ee      	b.n	8003068 <__libc_init_array+0xc>
 800308a:	f855 3b04 	ldr.w	r3, [r5], #4
 800308e:	4798      	blx	r3
 8003090:	3601      	adds	r6, #1
 8003092:	e7f2      	b.n	800307a <__libc_init_array+0x1e>
 8003094:	08003a40 	.word	0x08003a40
 8003098:	08003a40 	.word	0x08003a40
 800309c:	08003a40 	.word	0x08003a40
 80030a0:	08003a44 	.word	0x08003a44

080030a4 <memset>:
 80030a4:	4603      	mov	r3, r0
 80030a6:	4402      	add	r2, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <siprintf>:
 80030b4:	b40e      	push	{r1, r2, r3}
 80030b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030ba:	b500      	push	{lr}
 80030bc:	b09c      	sub	sp, #112	; 0x70
 80030be:	ab1d      	add	r3, sp, #116	; 0x74
 80030c0:	9002      	str	r0, [sp, #8]
 80030c2:	9006      	str	r0, [sp, #24]
 80030c4:	9107      	str	r1, [sp, #28]
 80030c6:	9104      	str	r1, [sp, #16]
 80030c8:	4808      	ldr	r0, [pc, #32]	; (80030ec <siprintf+0x38>)
 80030ca:	4909      	ldr	r1, [pc, #36]	; (80030f0 <siprintf+0x3c>)
 80030cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80030d0:	9105      	str	r1, [sp, #20]
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	a902      	add	r1, sp, #8
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f000 f868 	bl	80031ac <_svfiprintf_r>
 80030dc:	2200      	movs	r2, #0
 80030de:	9b02      	ldr	r3, [sp, #8]
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	b01c      	add	sp, #112	; 0x70
 80030e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030e8:	b003      	add	sp, #12
 80030ea:	4770      	bx	lr
 80030ec:	2000000c 	.word	0x2000000c
 80030f0:	ffff0208 	.word	0xffff0208

080030f4 <__ssputs_r>:
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	688e      	ldr	r6, [r1, #8]
 80030fa:	4682      	mov	sl, r0
 80030fc:	429e      	cmp	r6, r3
 80030fe:	460c      	mov	r4, r1
 8003100:	4690      	mov	r8, r2
 8003102:	461f      	mov	r7, r3
 8003104:	d838      	bhi.n	8003178 <__ssputs_r+0x84>
 8003106:	898a      	ldrh	r2, [r1, #12]
 8003108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800310c:	d032      	beq.n	8003174 <__ssputs_r+0x80>
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	6909      	ldr	r1, [r1, #16]
 8003112:	3301      	adds	r3, #1
 8003114:	eba5 0901 	sub.w	r9, r5, r1
 8003118:	6965      	ldr	r5, [r4, #20]
 800311a:	444b      	add	r3, r9
 800311c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003124:	106d      	asrs	r5, r5, #1
 8003126:	429d      	cmp	r5, r3
 8003128:	bf38      	it	cc
 800312a:	461d      	movcc	r5, r3
 800312c:	0553      	lsls	r3, r2, #21
 800312e:	d531      	bpl.n	8003194 <__ssputs_r+0xa0>
 8003130:	4629      	mov	r1, r5
 8003132:	f000 fb6f 	bl	8003814 <_malloc_r>
 8003136:	4606      	mov	r6, r0
 8003138:	b950      	cbnz	r0, 8003150 <__ssputs_r+0x5c>
 800313a:	230c      	movs	r3, #12
 800313c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003140:	f8ca 3000 	str.w	r3, [sl]
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003150:	464a      	mov	r2, r9
 8003152:	6921      	ldr	r1, [r4, #16]
 8003154:	f000 face 	bl	80036f4 <memcpy>
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	6126      	str	r6, [r4, #16]
 8003166:	444e      	add	r6, r9
 8003168:	6026      	str	r6, [r4, #0]
 800316a:	463e      	mov	r6, r7
 800316c:	6165      	str	r5, [r4, #20]
 800316e:	eba5 0509 	sub.w	r5, r5, r9
 8003172:	60a5      	str	r5, [r4, #8]
 8003174:	42be      	cmp	r6, r7
 8003176:	d900      	bls.n	800317a <__ssputs_r+0x86>
 8003178:	463e      	mov	r6, r7
 800317a:	4632      	mov	r2, r6
 800317c:	4641      	mov	r1, r8
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	f000 fac6 	bl	8003710 <memmove>
 8003184:	68a3      	ldr	r3, [r4, #8]
 8003186:	2000      	movs	r0, #0
 8003188:	1b9b      	subs	r3, r3, r6
 800318a:	60a3      	str	r3, [r4, #8]
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	4433      	add	r3, r6
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	e7db      	b.n	800314c <__ssputs_r+0x58>
 8003194:	462a      	mov	r2, r5
 8003196:	f000 fbb1 	bl	80038fc <_realloc_r>
 800319a:	4606      	mov	r6, r0
 800319c:	2800      	cmp	r0, #0
 800319e:	d1e1      	bne.n	8003164 <__ssputs_r+0x70>
 80031a0:	4650      	mov	r0, sl
 80031a2:	6921      	ldr	r1, [r4, #16]
 80031a4:	f000 face 	bl	8003744 <_free_r>
 80031a8:	e7c7      	b.n	800313a <__ssputs_r+0x46>
	...

080031ac <_svfiprintf_r>:
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	4698      	mov	r8, r3
 80031b2:	898b      	ldrh	r3, [r1, #12]
 80031b4:	4607      	mov	r7, r0
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	460d      	mov	r5, r1
 80031ba:	4614      	mov	r4, r2
 80031bc:	b09d      	sub	sp, #116	; 0x74
 80031be:	d50e      	bpl.n	80031de <_svfiprintf_r+0x32>
 80031c0:	690b      	ldr	r3, [r1, #16]
 80031c2:	b963      	cbnz	r3, 80031de <_svfiprintf_r+0x32>
 80031c4:	2140      	movs	r1, #64	; 0x40
 80031c6:	f000 fb25 	bl	8003814 <_malloc_r>
 80031ca:	6028      	str	r0, [r5, #0]
 80031cc:	6128      	str	r0, [r5, #16]
 80031ce:	b920      	cbnz	r0, 80031da <_svfiprintf_r+0x2e>
 80031d0:	230c      	movs	r3, #12
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d8:	e0d1      	b.n	800337e <_svfiprintf_r+0x1d2>
 80031da:	2340      	movs	r3, #64	; 0x40
 80031dc:	616b      	str	r3, [r5, #20]
 80031de:	2300      	movs	r3, #0
 80031e0:	9309      	str	r3, [sp, #36]	; 0x24
 80031e2:	2320      	movs	r3, #32
 80031e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031e8:	2330      	movs	r3, #48	; 0x30
 80031ea:	f04f 0901 	mov.w	r9, #1
 80031ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80031f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003398 <_svfiprintf_r+0x1ec>
 80031f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031fa:	4623      	mov	r3, r4
 80031fc:	469a      	mov	sl, r3
 80031fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003202:	b10a      	cbz	r2, 8003208 <_svfiprintf_r+0x5c>
 8003204:	2a25      	cmp	r2, #37	; 0x25
 8003206:	d1f9      	bne.n	80031fc <_svfiprintf_r+0x50>
 8003208:	ebba 0b04 	subs.w	fp, sl, r4
 800320c:	d00b      	beq.n	8003226 <_svfiprintf_r+0x7a>
 800320e:	465b      	mov	r3, fp
 8003210:	4622      	mov	r2, r4
 8003212:	4629      	mov	r1, r5
 8003214:	4638      	mov	r0, r7
 8003216:	f7ff ff6d 	bl	80030f4 <__ssputs_r>
 800321a:	3001      	adds	r0, #1
 800321c:	f000 80aa 	beq.w	8003374 <_svfiprintf_r+0x1c8>
 8003220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003222:	445a      	add	r2, fp
 8003224:	9209      	str	r2, [sp, #36]	; 0x24
 8003226:	f89a 3000 	ldrb.w	r3, [sl]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a2 	beq.w	8003374 <_svfiprintf_r+0x1c8>
 8003230:	2300      	movs	r3, #0
 8003232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800323a:	f10a 0a01 	add.w	sl, sl, #1
 800323e:	9304      	str	r3, [sp, #16]
 8003240:	9307      	str	r3, [sp, #28]
 8003242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003246:	931a      	str	r3, [sp, #104]	; 0x68
 8003248:	4654      	mov	r4, sl
 800324a:	2205      	movs	r2, #5
 800324c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003250:	4851      	ldr	r0, [pc, #324]	; (8003398 <_svfiprintf_r+0x1ec>)
 8003252:	f000 fa41 	bl	80036d8 <memchr>
 8003256:	9a04      	ldr	r2, [sp, #16]
 8003258:	b9d8      	cbnz	r0, 8003292 <_svfiprintf_r+0xe6>
 800325a:	06d0      	lsls	r0, r2, #27
 800325c:	bf44      	itt	mi
 800325e:	2320      	movmi	r3, #32
 8003260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003264:	0711      	lsls	r1, r2, #28
 8003266:	bf44      	itt	mi
 8003268:	232b      	movmi	r3, #43	; 0x2b
 800326a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800326e:	f89a 3000 	ldrb.w	r3, [sl]
 8003272:	2b2a      	cmp	r3, #42	; 0x2a
 8003274:	d015      	beq.n	80032a2 <_svfiprintf_r+0xf6>
 8003276:	4654      	mov	r4, sl
 8003278:	2000      	movs	r0, #0
 800327a:	f04f 0c0a 	mov.w	ip, #10
 800327e:	9a07      	ldr	r2, [sp, #28]
 8003280:	4621      	mov	r1, r4
 8003282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003286:	3b30      	subs	r3, #48	; 0x30
 8003288:	2b09      	cmp	r3, #9
 800328a:	d94e      	bls.n	800332a <_svfiprintf_r+0x17e>
 800328c:	b1b0      	cbz	r0, 80032bc <_svfiprintf_r+0x110>
 800328e:	9207      	str	r2, [sp, #28]
 8003290:	e014      	b.n	80032bc <_svfiprintf_r+0x110>
 8003292:	eba0 0308 	sub.w	r3, r0, r8
 8003296:	fa09 f303 	lsl.w	r3, r9, r3
 800329a:	4313      	orrs	r3, r2
 800329c:	46a2      	mov	sl, r4
 800329e:	9304      	str	r3, [sp, #16]
 80032a0:	e7d2      	b.n	8003248 <_svfiprintf_r+0x9c>
 80032a2:	9b03      	ldr	r3, [sp, #12]
 80032a4:	1d19      	adds	r1, r3, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	9103      	str	r1, [sp, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bfbb      	ittet	lt
 80032ae:	425b      	neglt	r3, r3
 80032b0:	f042 0202 	orrlt.w	r2, r2, #2
 80032b4:	9307      	strge	r3, [sp, #28]
 80032b6:	9307      	strlt	r3, [sp, #28]
 80032b8:	bfb8      	it	lt
 80032ba:	9204      	strlt	r2, [sp, #16]
 80032bc:	7823      	ldrb	r3, [r4, #0]
 80032be:	2b2e      	cmp	r3, #46	; 0x2e
 80032c0:	d10c      	bne.n	80032dc <_svfiprintf_r+0x130>
 80032c2:	7863      	ldrb	r3, [r4, #1]
 80032c4:	2b2a      	cmp	r3, #42	; 0x2a
 80032c6:	d135      	bne.n	8003334 <_svfiprintf_r+0x188>
 80032c8:	9b03      	ldr	r3, [sp, #12]
 80032ca:	3402      	adds	r4, #2
 80032cc:	1d1a      	adds	r2, r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	9203      	str	r2, [sp, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bfb8      	it	lt
 80032d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032da:	9305      	str	r3, [sp, #20]
 80032dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800339c <_svfiprintf_r+0x1f0>
 80032e0:	2203      	movs	r2, #3
 80032e2:	4650      	mov	r0, sl
 80032e4:	7821      	ldrb	r1, [r4, #0]
 80032e6:	f000 f9f7 	bl	80036d8 <memchr>
 80032ea:	b140      	cbz	r0, 80032fe <_svfiprintf_r+0x152>
 80032ec:	2340      	movs	r3, #64	; 0x40
 80032ee:	eba0 000a 	sub.w	r0, r0, sl
 80032f2:	fa03 f000 	lsl.w	r0, r3, r0
 80032f6:	9b04      	ldr	r3, [sp, #16]
 80032f8:	3401      	adds	r4, #1
 80032fa:	4303      	orrs	r3, r0
 80032fc:	9304      	str	r3, [sp, #16]
 80032fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003302:	2206      	movs	r2, #6
 8003304:	4826      	ldr	r0, [pc, #152]	; (80033a0 <_svfiprintf_r+0x1f4>)
 8003306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800330a:	f000 f9e5 	bl	80036d8 <memchr>
 800330e:	2800      	cmp	r0, #0
 8003310:	d038      	beq.n	8003384 <_svfiprintf_r+0x1d8>
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <_svfiprintf_r+0x1f8>)
 8003314:	bb1b      	cbnz	r3, 800335e <_svfiprintf_r+0x1b2>
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	3307      	adds	r3, #7
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	3308      	adds	r3, #8
 8003320:	9303      	str	r3, [sp, #12]
 8003322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003324:	4433      	add	r3, r6
 8003326:	9309      	str	r3, [sp, #36]	; 0x24
 8003328:	e767      	b.n	80031fa <_svfiprintf_r+0x4e>
 800332a:	460c      	mov	r4, r1
 800332c:	2001      	movs	r0, #1
 800332e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003332:	e7a5      	b.n	8003280 <_svfiprintf_r+0xd4>
 8003334:	2300      	movs	r3, #0
 8003336:	f04f 0c0a 	mov.w	ip, #10
 800333a:	4619      	mov	r1, r3
 800333c:	3401      	adds	r4, #1
 800333e:	9305      	str	r3, [sp, #20]
 8003340:	4620      	mov	r0, r4
 8003342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003346:	3a30      	subs	r2, #48	; 0x30
 8003348:	2a09      	cmp	r2, #9
 800334a:	d903      	bls.n	8003354 <_svfiprintf_r+0x1a8>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0c5      	beq.n	80032dc <_svfiprintf_r+0x130>
 8003350:	9105      	str	r1, [sp, #20]
 8003352:	e7c3      	b.n	80032dc <_svfiprintf_r+0x130>
 8003354:	4604      	mov	r4, r0
 8003356:	2301      	movs	r3, #1
 8003358:	fb0c 2101 	mla	r1, ip, r1, r2
 800335c:	e7f0      	b.n	8003340 <_svfiprintf_r+0x194>
 800335e:	ab03      	add	r3, sp, #12
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	462a      	mov	r2, r5
 8003364:	4638      	mov	r0, r7
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <_svfiprintf_r+0x1fc>)
 8003368:	a904      	add	r1, sp, #16
 800336a:	f3af 8000 	nop.w
 800336e:	1c42      	adds	r2, r0, #1
 8003370:	4606      	mov	r6, r0
 8003372:	d1d6      	bne.n	8003322 <_svfiprintf_r+0x176>
 8003374:	89ab      	ldrh	r3, [r5, #12]
 8003376:	065b      	lsls	r3, r3, #25
 8003378:	f53f af2c 	bmi.w	80031d4 <_svfiprintf_r+0x28>
 800337c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800337e:	b01d      	add	sp, #116	; 0x74
 8003380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003384:	ab03      	add	r3, sp, #12
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	462a      	mov	r2, r5
 800338a:	4638      	mov	r0, r7
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <_svfiprintf_r+0x1fc>)
 800338e:	a904      	add	r1, sp, #16
 8003390:	f000 f87c 	bl	800348c <_printf_i>
 8003394:	e7eb      	b.n	800336e <_svfiprintf_r+0x1c2>
 8003396:	bf00      	nop
 8003398:	08003a0c 	.word	0x08003a0c
 800339c:	08003a12 	.word	0x08003a12
 80033a0:	08003a16 	.word	0x08003a16
 80033a4:	00000000 	.word	0x00000000
 80033a8:	080030f5 	.word	0x080030f5

080033ac <_printf_common>:
 80033ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	4616      	mov	r6, r2
 80033b2:	4699      	mov	r9, r3
 80033b4:	688a      	ldr	r2, [r1, #8]
 80033b6:	690b      	ldr	r3, [r1, #16]
 80033b8:	4607      	mov	r7, r0
 80033ba:	4293      	cmp	r3, r2
 80033bc:	bfb8      	it	lt
 80033be:	4613      	movlt	r3, r2
 80033c0:	6033      	str	r3, [r6, #0]
 80033c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033c6:	460c      	mov	r4, r1
 80033c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033cc:	b10a      	cbz	r2, 80033d2 <_printf_common+0x26>
 80033ce:	3301      	adds	r3, #1
 80033d0:	6033      	str	r3, [r6, #0]
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	0699      	lsls	r1, r3, #26
 80033d6:	bf42      	ittt	mi
 80033d8:	6833      	ldrmi	r3, [r6, #0]
 80033da:	3302      	addmi	r3, #2
 80033dc:	6033      	strmi	r3, [r6, #0]
 80033de:	6825      	ldr	r5, [r4, #0]
 80033e0:	f015 0506 	ands.w	r5, r5, #6
 80033e4:	d106      	bne.n	80033f4 <_printf_common+0x48>
 80033e6:	f104 0a19 	add.w	sl, r4, #25
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	6832      	ldr	r2, [r6, #0]
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	dc28      	bgt.n	8003446 <_printf_common+0x9a>
 80033f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033f8:	1e13      	subs	r3, r2, #0
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	bf18      	it	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	0692      	lsls	r2, r2, #26
 8003402:	d42d      	bmi.n	8003460 <_printf_common+0xb4>
 8003404:	4649      	mov	r1, r9
 8003406:	4638      	mov	r0, r7
 8003408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800340c:	47c0      	blx	r8
 800340e:	3001      	adds	r0, #1
 8003410:	d020      	beq.n	8003454 <_printf_common+0xa8>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	68e5      	ldr	r5, [r4, #12]
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf18      	it	ne
 800341e:	2500      	movne	r5, #0
 8003420:	6832      	ldr	r2, [r6, #0]
 8003422:	f04f 0600 	mov.w	r6, #0
 8003426:	68a3      	ldr	r3, [r4, #8]
 8003428:	bf08      	it	eq
 800342a:	1aad      	subeq	r5, r5, r2
 800342c:	6922      	ldr	r2, [r4, #16]
 800342e:	bf08      	it	eq
 8003430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003434:	4293      	cmp	r3, r2
 8003436:	bfc4      	itt	gt
 8003438:	1a9b      	subgt	r3, r3, r2
 800343a:	18ed      	addgt	r5, r5, r3
 800343c:	341a      	adds	r4, #26
 800343e:	42b5      	cmp	r5, r6
 8003440:	d11a      	bne.n	8003478 <_printf_common+0xcc>
 8003442:	2000      	movs	r0, #0
 8003444:	e008      	b.n	8003458 <_printf_common+0xac>
 8003446:	2301      	movs	r3, #1
 8003448:	4652      	mov	r2, sl
 800344a:	4649      	mov	r1, r9
 800344c:	4638      	mov	r0, r7
 800344e:	47c0      	blx	r8
 8003450:	3001      	adds	r0, #1
 8003452:	d103      	bne.n	800345c <_printf_common+0xb0>
 8003454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345c:	3501      	adds	r5, #1
 800345e:	e7c4      	b.n	80033ea <_printf_common+0x3e>
 8003460:	2030      	movs	r0, #48	; 0x30
 8003462:	18e1      	adds	r1, r4, r3
 8003464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800346e:	4422      	add	r2, r4
 8003470:	3302      	adds	r3, #2
 8003472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003476:	e7c5      	b.n	8003404 <_printf_common+0x58>
 8003478:	2301      	movs	r3, #1
 800347a:	4622      	mov	r2, r4
 800347c:	4649      	mov	r1, r9
 800347e:	4638      	mov	r0, r7
 8003480:	47c0      	blx	r8
 8003482:	3001      	adds	r0, #1
 8003484:	d0e6      	beq.n	8003454 <_printf_common+0xa8>
 8003486:	3601      	adds	r6, #1
 8003488:	e7d9      	b.n	800343e <_printf_common+0x92>
	...

0800348c <_printf_i>:
 800348c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	7e0f      	ldrb	r7, [r1, #24]
 8003492:	4691      	mov	r9, r2
 8003494:	2f78      	cmp	r7, #120	; 0x78
 8003496:	4680      	mov	r8, r0
 8003498:	460c      	mov	r4, r1
 800349a:	469a      	mov	sl, r3
 800349c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800349e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034a2:	d807      	bhi.n	80034b4 <_printf_i+0x28>
 80034a4:	2f62      	cmp	r7, #98	; 0x62
 80034a6:	d80a      	bhi.n	80034be <_printf_i+0x32>
 80034a8:	2f00      	cmp	r7, #0
 80034aa:	f000 80d9 	beq.w	8003660 <_printf_i+0x1d4>
 80034ae:	2f58      	cmp	r7, #88	; 0x58
 80034b0:	f000 80a4 	beq.w	80035fc <_printf_i+0x170>
 80034b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034bc:	e03a      	b.n	8003534 <_printf_i+0xa8>
 80034be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034c2:	2b15      	cmp	r3, #21
 80034c4:	d8f6      	bhi.n	80034b4 <_printf_i+0x28>
 80034c6:	a101      	add	r1, pc, #4	; (adr r1, 80034cc <_printf_i+0x40>)
 80034c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034cc:	08003525 	.word	0x08003525
 80034d0:	08003539 	.word	0x08003539
 80034d4:	080034b5 	.word	0x080034b5
 80034d8:	080034b5 	.word	0x080034b5
 80034dc:	080034b5 	.word	0x080034b5
 80034e0:	080034b5 	.word	0x080034b5
 80034e4:	08003539 	.word	0x08003539
 80034e8:	080034b5 	.word	0x080034b5
 80034ec:	080034b5 	.word	0x080034b5
 80034f0:	080034b5 	.word	0x080034b5
 80034f4:	080034b5 	.word	0x080034b5
 80034f8:	08003647 	.word	0x08003647
 80034fc:	08003569 	.word	0x08003569
 8003500:	08003629 	.word	0x08003629
 8003504:	080034b5 	.word	0x080034b5
 8003508:	080034b5 	.word	0x080034b5
 800350c:	08003669 	.word	0x08003669
 8003510:	080034b5 	.word	0x080034b5
 8003514:	08003569 	.word	0x08003569
 8003518:	080034b5 	.word	0x080034b5
 800351c:	080034b5 	.word	0x080034b5
 8003520:	08003631 	.word	0x08003631
 8003524:	682b      	ldr	r3, [r5, #0]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	602a      	str	r2, [r5, #0]
 800352c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003534:	2301      	movs	r3, #1
 8003536:	e0a4      	b.n	8003682 <_printf_i+0x1f6>
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	6829      	ldr	r1, [r5, #0]
 800353c:	0606      	lsls	r6, r0, #24
 800353e:	f101 0304 	add.w	r3, r1, #4
 8003542:	d50a      	bpl.n	800355a <_printf_i+0xce>
 8003544:	680e      	ldr	r6, [r1, #0]
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	2e00      	cmp	r6, #0
 800354a:	da03      	bge.n	8003554 <_printf_i+0xc8>
 800354c:	232d      	movs	r3, #45	; 0x2d
 800354e:	4276      	negs	r6, r6
 8003550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003554:	230a      	movs	r3, #10
 8003556:	485e      	ldr	r0, [pc, #376]	; (80036d0 <_printf_i+0x244>)
 8003558:	e019      	b.n	800358e <_printf_i+0x102>
 800355a:	680e      	ldr	r6, [r1, #0]
 800355c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	bf18      	it	ne
 8003564:	b236      	sxthne	r6, r6
 8003566:	e7ef      	b.n	8003548 <_printf_i+0xbc>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	1d19      	adds	r1, r3, #4
 800356e:	6029      	str	r1, [r5, #0]
 8003570:	0601      	lsls	r1, r0, #24
 8003572:	d501      	bpl.n	8003578 <_printf_i+0xec>
 8003574:	681e      	ldr	r6, [r3, #0]
 8003576:	e002      	b.n	800357e <_printf_i+0xf2>
 8003578:	0646      	lsls	r6, r0, #25
 800357a:	d5fb      	bpl.n	8003574 <_printf_i+0xe8>
 800357c:	881e      	ldrh	r6, [r3, #0]
 800357e:	2f6f      	cmp	r7, #111	; 0x6f
 8003580:	bf0c      	ite	eq
 8003582:	2308      	moveq	r3, #8
 8003584:	230a      	movne	r3, #10
 8003586:	4852      	ldr	r0, [pc, #328]	; (80036d0 <_printf_i+0x244>)
 8003588:	2100      	movs	r1, #0
 800358a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800358e:	6865      	ldr	r5, [r4, #4]
 8003590:	2d00      	cmp	r5, #0
 8003592:	bfa8      	it	ge
 8003594:	6821      	ldrge	r1, [r4, #0]
 8003596:	60a5      	str	r5, [r4, #8]
 8003598:	bfa4      	itt	ge
 800359a:	f021 0104 	bicge.w	r1, r1, #4
 800359e:	6021      	strge	r1, [r4, #0]
 80035a0:	b90e      	cbnz	r6, 80035a6 <_printf_i+0x11a>
 80035a2:	2d00      	cmp	r5, #0
 80035a4:	d04d      	beq.n	8003642 <_printf_i+0x1b6>
 80035a6:	4615      	mov	r5, r2
 80035a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80035ac:	fb03 6711 	mls	r7, r3, r1, r6
 80035b0:	5dc7      	ldrb	r7, [r0, r7]
 80035b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035b6:	4637      	mov	r7, r6
 80035b8:	42bb      	cmp	r3, r7
 80035ba:	460e      	mov	r6, r1
 80035bc:	d9f4      	bls.n	80035a8 <_printf_i+0x11c>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d10b      	bne.n	80035da <_printf_i+0x14e>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	07de      	lsls	r6, r3, #31
 80035c6:	d508      	bpl.n	80035da <_printf_i+0x14e>
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	6861      	ldr	r1, [r4, #4]
 80035cc:	4299      	cmp	r1, r3
 80035ce:	bfde      	ittt	le
 80035d0:	2330      	movle	r3, #48	; 0x30
 80035d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035da:	1b52      	subs	r2, r2, r5
 80035dc:	6122      	str	r2, [r4, #16]
 80035de:	464b      	mov	r3, r9
 80035e0:	4621      	mov	r1, r4
 80035e2:	4640      	mov	r0, r8
 80035e4:	f8cd a000 	str.w	sl, [sp]
 80035e8:	aa03      	add	r2, sp, #12
 80035ea:	f7ff fedf 	bl	80033ac <_printf_common>
 80035ee:	3001      	adds	r0, #1
 80035f0:	d14c      	bne.n	800368c <_printf_i+0x200>
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f6:	b004      	add	sp, #16
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	4834      	ldr	r0, [pc, #208]	; (80036d0 <_printf_i+0x244>)
 80035fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003602:	6829      	ldr	r1, [r5, #0]
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f851 6b04 	ldr.w	r6, [r1], #4
 800360a:	6029      	str	r1, [r5, #0]
 800360c:	061d      	lsls	r5, r3, #24
 800360e:	d514      	bpl.n	800363a <_printf_i+0x1ae>
 8003610:	07df      	lsls	r7, r3, #31
 8003612:	bf44      	itt	mi
 8003614:	f043 0320 	orrmi.w	r3, r3, #32
 8003618:	6023      	strmi	r3, [r4, #0]
 800361a:	b91e      	cbnz	r6, 8003624 <_printf_i+0x198>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f023 0320 	bic.w	r3, r3, #32
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	2310      	movs	r3, #16
 8003626:	e7af      	b.n	8003588 <_printf_i+0xfc>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	2378      	movs	r3, #120	; 0x78
 8003632:	4828      	ldr	r0, [pc, #160]	; (80036d4 <_printf_i+0x248>)
 8003634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003638:	e7e3      	b.n	8003602 <_printf_i+0x176>
 800363a:	0659      	lsls	r1, r3, #25
 800363c:	bf48      	it	mi
 800363e:	b2b6      	uxthmi	r6, r6
 8003640:	e7e6      	b.n	8003610 <_printf_i+0x184>
 8003642:	4615      	mov	r5, r2
 8003644:	e7bb      	b.n	80035be <_printf_i+0x132>
 8003646:	682b      	ldr	r3, [r5, #0]
 8003648:	6826      	ldr	r6, [r4, #0]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	6961      	ldr	r1, [r4, #20]
 800364e:	6028      	str	r0, [r5, #0]
 8003650:	0635      	lsls	r5, r6, #24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	d501      	bpl.n	800365a <_printf_i+0x1ce>
 8003656:	6019      	str	r1, [r3, #0]
 8003658:	e002      	b.n	8003660 <_printf_i+0x1d4>
 800365a:	0670      	lsls	r0, r6, #25
 800365c:	d5fb      	bpl.n	8003656 <_printf_i+0x1ca>
 800365e:	8019      	strh	r1, [r3, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	4615      	mov	r5, r2
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	e7ba      	b.n	80035de <_printf_i+0x152>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	2100      	movs	r1, #0
 800366c:	1d1a      	adds	r2, r3, #4
 800366e:	602a      	str	r2, [r5, #0]
 8003670:	681d      	ldr	r5, [r3, #0]
 8003672:	6862      	ldr	r2, [r4, #4]
 8003674:	4628      	mov	r0, r5
 8003676:	f000 f82f 	bl	80036d8 <memchr>
 800367a:	b108      	cbz	r0, 8003680 <_printf_i+0x1f4>
 800367c:	1b40      	subs	r0, r0, r5
 800367e:	6060      	str	r0, [r4, #4]
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800368a:	e7a8      	b.n	80035de <_printf_i+0x152>
 800368c:	462a      	mov	r2, r5
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	47d0      	blx	sl
 8003696:	3001      	adds	r0, #1
 8003698:	d0ab      	beq.n	80035f2 <_printf_i+0x166>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	079b      	lsls	r3, r3, #30
 800369e:	d413      	bmi.n	80036c8 <_printf_i+0x23c>
 80036a0:	68e0      	ldr	r0, [r4, #12]
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	4298      	cmp	r0, r3
 80036a6:	bfb8      	it	lt
 80036a8:	4618      	movlt	r0, r3
 80036aa:	e7a4      	b.n	80035f6 <_printf_i+0x16a>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4632      	mov	r2, r6
 80036b0:	4649      	mov	r1, r9
 80036b2:	4640      	mov	r0, r8
 80036b4:	47d0      	blx	sl
 80036b6:	3001      	adds	r0, #1
 80036b8:	d09b      	beq.n	80035f2 <_printf_i+0x166>
 80036ba:	3501      	adds	r5, #1
 80036bc:	68e3      	ldr	r3, [r4, #12]
 80036be:	9903      	ldr	r1, [sp, #12]
 80036c0:	1a5b      	subs	r3, r3, r1
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	dcf2      	bgt.n	80036ac <_printf_i+0x220>
 80036c6:	e7eb      	b.n	80036a0 <_printf_i+0x214>
 80036c8:	2500      	movs	r5, #0
 80036ca:	f104 0619 	add.w	r6, r4, #25
 80036ce:	e7f5      	b.n	80036bc <_printf_i+0x230>
 80036d0:	08003a1d 	.word	0x08003a1d
 80036d4:	08003a2e 	.word	0x08003a2e

080036d8 <memchr>:
 80036d8:	4603      	mov	r3, r0
 80036da:	b510      	push	{r4, lr}
 80036dc:	b2c9      	uxtb	r1, r1
 80036de:	4402      	add	r2, r0
 80036e0:	4293      	cmp	r3, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	d101      	bne.n	80036ea <memchr+0x12>
 80036e6:	2000      	movs	r0, #0
 80036e8:	e003      	b.n	80036f2 <memchr+0x1a>
 80036ea:	7804      	ldrb	r4, [r0, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	428c      	cmp	r4, r1
 80036f0:	d1f6      	bne.n	80036e0 <memchr+0x8>
 80036f2:	bd10      	pop	{r4, pc}

080036f4 <memcpy>:
 80036f4:	440a      	add	r2, r1
 80036f6:	4291      	cmp	r1, r2
 80036f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80036fc:	d100      	bne.n	8003700 <memcpy+0xc>
 80036fe:	4770      	bx	lr
 8003700:	b510      	push	{r4, lr}
 8003702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003706:	4291      	cmp	r1, r2
 8003708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800370c:	d1f9      	bne.n	8003702 <memcpy+0xe>
 800370e:	bd10      	pop	{r4, pc}

08003710 <memmove>:
 8003710:	4288      	cmp	r0, r1
 8003712:	b510      	push	{r4, lr}
 8003714:	eb01 0402 	add.w	r4, r1, r2
 8003718:	d902      	bls.n	8003720 <memmove+0x10>
 800371a:	4284      	cmp	r4, r0
 800371c:	4623      	mov	r3, r4
 800371e:	d807      	bhi.n	8003730 <memmove+0x20>
 8003720:	1e43      	subs	r3, r0, #1
 8003722:	42a1      	cmp	r1, r4
 8003724:	d008      	beq.n	8003738 <memmove+0x28>
 8003726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800372a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800372e:	e7f8      	b.n	8003722 <memmove+0x12>
 8003730:	4601      	mov	r1, r0
 8003732:	4402      	add	r2, r0
 8003734:	428a      	cmp	r2, r1
 8003736:	d100      	bne.n	800373a <memmove+0x2a>
 8003738:	bd10      	pop	{r4, pc}
 800373a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800373e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003742:	e7f7      	b.n	8003734 <memmove+0x24>

08003744 <_free_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	2900      	cmp	r1, #0
 800374a:	d040      	beq.n	80037ce <_free_r+0x8a>
 800374c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003750:	1f0c      	subs	r4, r1, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bfb8      	it	lt
 8003756:	18e4      	addlt	r4, r4, r3
 8003758:	f000 f910 	bl	800397c <__malloc_lock>
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <_free_r+0x8c>)
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	b933      	cbnz	r3, 8003770 <_free_r+0x2c>
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	6014      	str	r4, [r2, #0]
 8003766:	4628      	mov	r0, r5
 8003768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800376c:	f000 b90c 	b.w	8003988 <__malloc_unlock>
 8003770:	42a3      	cmp	r3, r4
 8003772:	d908      	bls.n	8003786 <_free_r+0x42>
 8003774:	6820      	ldr	r0, [r4, #0]
 8003776:	1821      	adds	r1, r4, r0
 8003778:	428b      	cmp	r3, r1
 800377a:	bf01      	itttt	eq
 800377c:	6819      	ldreq	r1, [r3, #0]
 800377e:	685b      	ldreq	r3, [r3, #4]
 8003780:	1809      	addeq	r1, r1, r0
 8003782:	6021      	streq	r1, [r4, #0]
 8003784:	e7ed      	b.n	8003762 <_free_r+0x1e>
 8003786:	461a      	mov	r2, r3
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	b10b      	cbz	r3, 8003790 <_free_r+0x4c>
 800378c:	42a3      	cmp	r3, r4
 800378e:	d9fa      	bls.n	8003786 <_free_r+0x42>
 8003790:	6811      	ldr	r1, [r2, #0]
 8003792:	1850      	adds	r0, r2, r1
 8003794:	42a0      	cmp	r0, r4
 8003796:	d10b      	bne.n	80037b0 <_free_r+0x6c>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	4401      	add	r1, r0
 800379c:	1850      	adds	r0, r2, r1
 800379e:	4283      	cmp	r3, r0
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	d1e0      	bne.n	8003766 <_free_r+0x22>
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4401      	add	r1, r0
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	e7da      	b.n	8003766 <_free_r+0x22>
 80037b0:	d902      	bls.n	80037b8 <_free_r+0x74>
 80037b2:	230c      	movs	r3, #12
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	e7d6      	b.n	8003766 <_free_r+0x22>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	1821      	adds	r1, r4, r0
 80037bc:	428b      	cmp	r3, r1
 80037be:	bf01      	itttt	eq
 80037c0:	6819      	ldreq	r1, [r3, #0]
 80037c2:	685b      	ldreq	r3, [r3, #4]
 80037c4:	1809      	addeq	r1, r1, r0
 80037c6:	6021      	streq	r1, [r4, #0]
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6054      	str	r4, [r2, #4]
 80037cc:	e7cb      	b.n	8003766 <_free_r+0x22>
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200000c4 	.word	0x200000c4

080037d4 <sbrk_aligned>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4e0e      	ldr	r6, [pc, #56]	; (8003810 <sbrk_aligned+0x3c>)
 80037d8:	460c      	mov	r4, r1
 80037da:	6831      	ldr	r1, [r6, #0]
 80037dc:	4605      	mov	r5, r0
 80037de:	b911      	cbnz	r1, 80037e6 <sbrk_aligned+0x12>
 80037e0:	f000 f8bc 	bl	800395c <_sbrk_r>
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 f8b7 	bl	800395c <_sbrk_r>
 80037ee:	1c43      	adds	r3, r0, #1
 80037f0:	d00a      	beq.n	8003808 <sbrk_aligned+0x34>
 80037f2:	1cc4      	adds	r4, r0, #3
 80037f4:	f024 0403 	bic.w	r4, r4, #3
 80037f8:	42a0      	cmp	r0, r4
 80037fa:	d007      	beq.n	800380c <sbrk_aligned+0x38>
 80037fc:	1a21      	subs	r1, r4, r0
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f8ac 	bl	800395c <_sbrk_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d101      	bne.n	800380c <sbrk_aligned+0x38>
 8003808:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800380c:	4620      	mov	r0, r4
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	200000c8 	.word	0x200000c8

08003814 <_malloc_r>:
 8003814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	1ccd      	adds	r5, r1, #3
 800381a:	f025 0503 	bic.w	r5, r5, #3
 800381e:	3508      	adds	r5, #8
 8003820:	2d0c      	cmp	r5, #12
 8003822:	bf38      	it	cc
 8003824:	250c      	movcc	r5, #12
 8003826:	2d00      	cmp	r5, #0
 8003828:	4607      	mov	r7, r0
 800382a:	db01      	blt.n	8003830 <_malloc_r+0x1c>
 800382c:	42a9      	cmp	r1, r5
 800382e:	d905      	bls.n	800383c <_malloc_r+0x28>
 8003830:	230c      	movs	r3, #12
 8003832:	2600      	movs	r6, #0
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4630      	mov	r0, r6
 8003838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800383c:	4e2e      	ldr	r6, [pc, #184]	; (80038f8 <_malloc_r+0xe4>)
 800383e:	f000 f89d 	bl	800397c <__malloc_lock>
 8003842:	6833      	ldr	r3, [r6, #0]
 8003844:	461c      	mov	r4, r3
 8003846:	bb34      	cbnz	r4, 8003896 <_malloc_r+0x82>
 8003848:	4629      	mov	r1, r5
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff ffc2 	bl	80037d4 <sbrk_aligned>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	4604      	mov	r4, r0
 8003854:	d14d      	bne.n	80038f2 <_malloc_r+0xde>
 8003856:	6834      	ldr	r4, [r6, #0]
 8003858:	4626      	mov	r6, r4
 800385a:	2e00      	cmp	r6, #0
 800385c:	d140      	bne.n	80038e0 <_malloc_r+0xcc>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	4631      	mov	r1, r6
 8003862:	4638      	mov	r0, r7
 8003864:	eb04 0803 	add.w	r8, r4, r3
 8003868:	f000 f878 	bl	800395c <_sbrk_r>
 800386c:	4580      	cmp	r8, r0
 800386e:	d13a      	bne.n	80038e6 <_malloc_r+0xd2>
 8003870:	6821      	ldr	r1, [r4, #0]
 8003872:	3503      	adds	r5, #3
 8003874:	1a6d      	subs	r5, r5, r1
 8003876:	f025 0503 	bic.w	r5, r5, #3
 800387a:	3508      	adds	r5, #8
 800387c:	2d0c      	cmp	r5, #12
 800387e:	bf38      	it	cc
 8003880:	250c      	movcc	r5, #12
 8003882:	4638      	mov	r0, r7
 8003884:	4629      	mov	r1, r5
 8003886:	f7ff ffa5 	bl	80037d4 <sbrk_aligned>
 800388a:	3001      	adds	r0, #1
 800388c:	d02b      	beq.n	80038e6 <_malloc_r+0xd2>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	442b      	add	r3, r5
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	e00e      	b.n	80038b4 <_malloc_r+0xa0>
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	1b52      	subs	r2, r2, r5
 800389a:	d41e      	bmi.n	80038da <_malloc_r+0xc6>
 800389c:	2a0b      	cmp	r2, #11
 800389e:	d916      	bls.n	80038ce <_malloc_r+0xba>
 80038a0:	1961      	adds	r1, r4, r5
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	6025      	str	r5, [r4, #0]
 80038a6:	bf18      	it	ne
 80038a8:	6059      	strne	r1, [r3, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	bf08      	it	eq
 80038ae:	6031      	streq	r1, [r6, #0]
 80038b0:	5162      	str	r2, [r4, r5]
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	4638      	mov	r0, r7
 80038b6:	f104 060b 	add.w	r6, r4, #11
 80038ba:	f000 f865 	bl	8003988 <__malloc_unlock>
 80038be:	f026 0607 	bic.w	r6, r6, #7
 80038c2:	1d23      	adds	r3, r4, #4
 80038c4:	1af2      	subs	r2, r6, r3
 80038c6:	d0b6      	beq.n	8003836 <_malloc_r+0x22>
 80038c8:	1b9b      	subs	r3, r3, r6
 80038ca:	50a3      	str	r3, [r4, r2]
 80038cc:	e7b3      	b.n	8003836 <_malloc_r+0x22>
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	bf0c      	ite	eq
 80038d4:	6032      	streq	r2, [r6, #0]
 80038d6:	605a      	strne	r2, [r3, #4]
 80038d8:	e7ec      	b.n	80038b4 <_malloc_r+0xa0>
 80038da:	4623      	mov	r3, r4
 80038dc:	6864      	ldr	r4, [r4, #4]
 80038de:	e7b2      	b.n	8003846 <_malloc_r+0x32>
 80038e0:	4634      	mov	r4, r6
 80038e2:	6876      	ldr	r6, [r6, #4]
 80038e4:	e7b9      	b.n	800385a <_malloc_r+0x46>
 80038e6:	230c      	movs	r3, #12
 80038e8:	4638      	mov	r0, r7
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	f000 f84c 	bl	8003988 <__malloc_unlock>
 80038f0:	e7a1      	b.n	8003836 <_malloc_r+0x22>
 80038f2:	6025      	str	r5, [r4, #0]
 80038f4:	e7de      	b.n	80038b4 <_malloc_r+0xa0>
 80038f6:	bf00      	nop
 80038f8:	200000c4 	.word	0x200000c4

080038fc <_realloc_r>:
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	4680      	mov	r8, r0
 8003902:	4614      	mov	r4, r2
 8003904:	460e      	mov	r6, r1
 8003906:	b921      	cbnz	r1, 8003912 <_realloc_r+0x16>
 8003908:	4611      	mov	r1, r2
 800390a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800390e:	f7ff bf81 	b.w	8003814 <_malloc_r>
 8003912:	b92a      	cbnz	r2, 8003920 <_realloc_r+0x24>
 8003914:	f7ff ff16 	bl	8003744 <_free_r>
 8003918:	4625      	mov	r5, r4
 800391a:	4628      	mov	r0, r5
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003920:	f000 f838 	bl	8003994 <_malloc_usable_size_r>
 8003924:	4284      	cmp	r4, r0
 8003926:	4607      	mov	r7, r0
 8003928:	d802      	bhi.n	8003930 <_realloc_r+0x34>
 800392a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800392e:	d812      	bhi.n	8003956 <_realloc_r+0x5a>
 8003930:	4621      	mov	r1, r4
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff ff6e 	bl	8003814 <_malloc_r>
 8003938:	4605      	mov	r5, r0
 800393a:	2800      	cmp	r0, #0
 800393c:	d0ed      	beq.n	800391a <_realloc_r+0x1e>
 800393e:	42bc      	cmp	r4, r7
 8003940:	4622      	mov	r2, r4
 8003942:	4631      	mov	r1, r6
 8003944:	bf28      	it	cs
 8003946:	463a      	movcs	r2, r7
 8003948:	f7ff fed4 	bl	80036f4 <memcpy>
 800394c:	4631      	mov	r1, r6
 800394e:	4640      	mov	r0, r8
 8003950:	f7ff fef8 	bl	8003744 <_free_r>
 8003954:	e7e1      	b.n	800391a <_realloc_r+0x1e>
 8003956:	4635      	mov	r5, r6
 8003958:	e7df      	b.n	800391a <_realloc_r+0x1e>
	...

0800395c <_sbrk_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	2300      	movs	r3, #0
 8003960:	4d05      	ldr	r5, [pc, #20]	; (8003978 <_sbrk_r+0x1c>)
 8003962:	4604      	mov	r4, r0
 8003964:	4608      	mov	r0, r1
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	f7fd febc 	bl	80016e4 <_sbrk>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_sbrk_r+0x1a>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_sbrk_r+0x1a>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	200000cc 	.word	0x200000cc

0800397c <__malloc_lock>:
 800397c:	4801      	ldr	r0, [pc, #4]	; (8003984 <__malloc_lock+0x8>)
 800397e:	f000 b811 	b.w	80039a4 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	200000d0 	.word	0x200000d0

08003988 <__malloc_unlock>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__malloc_unlock+0x8>)
 800398a:	f000 b80c 	b.w	80039a6 <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	200000d0 	.word	0x200000d0

08003994 <_malloc_usable_size_r>:
 8003994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003998:	1f18      	subs	r0, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	bfbc      	itt	lt
 800399e:	580b      	ldrlt	r3, [r1, r0]
 80039a0:	18c0      	addlt	r0, r0, r3
 80039a2:	4770      	bx	lr

080039a4 <__retarget_lock_acquire_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__retarget_lock_release_recursive>:
 80039a6:	4770      	bx	lr

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr
